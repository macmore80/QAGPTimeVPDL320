<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ViDi.NET.Interfaces</name>
    </assembly>
    <members>
        <member name="T:ViDi.NET.Interfaces.WorkspaceAccessLevel">
            <summary>
            Defines the different levels of authority required
            to call various workspace-maniuplating methods.
            </summary>
        </member>
        <member name="F:ViDi.NET.Interfaces.WorkspaceAccessLevel.Anyone">
            <summary>
            No authorization is required to access the workspace being requested.
            </summary>
        </member>
        <member name="F:ViDi.NET.Interfaces.WorkspaceAccessLevel.Read">
            <summary>
            The caller must have permission to view the workspace being requested.
            </summary>
        </member>
        <member name="F:ViDi.NET.Interfaces.WorkspaceAccessLevel.Write">
            <summary>
            The caller must have permission to modify the workspace being manipulated.
            </summary>
        </member>
        <member name="F:ViDi.NET.Interfaces.WorkspaceAccessLevel.Owner">
            <summary>
            The caller must be the user that created the workspace being manipulated.
            </summary>
        </member>
        <member name="T:ViDi.NET.Interfaces.AuthorizeWorkspaceAccessAttribute">
            <summary>
            Defines a parameter that should be applied to LibraryAccess methods
            that take private data (e.g. existing workspaces) as arguments and access/modify
            those data.
            
            In a multi-user remote scenario, a request handler should consume this
            attribute to see what level of authorization is required to call the method.
            </summary>
        </member>
        <member name="P:ViDi.NET.Interfaces.AuthorizeWorkspaceAccessAttribute.MinimumRequiredAccess">
            <summary>
            The minimum permissions required for the method to operate on
            its workspace parameter(s). If the operation doesn't infringe
            on the workspace's privacy, then use <see cref="F:ViDi.NET.Interfaces.WorkspaceAccessLevel.Anyone"/>
            to allow any user to call the method.
            </summary>
        </member>
        <member name="T:ViDi.NET.Interfaces.NoAuthorizationRequiredAttribute">
            <summary>
            Defines a parameter that should be applied to LibraryAccess methods
            that do not take private workspaces as parameters.
            </summary>
            <remarks>
            This includes methods that don't operate on workspaces, methods that
            create workspaces (as the workspace doesn't exist yet), and methods
            that always return results appropriate for the caller (e.g. 
            ListWorkspaces returning only the caller's workspaces).
            </remarks>
        </member>
        <member name="T:ViDi.NET.Interfaces.NoOneAuthorizedAttribute">
            <summary>
            Defines a parameter that should be applied to LibraryAccess methods
            that do shouldn't be executable on the cloud.
            </summary>
        </member>
        <member name="T:ViDi.NET.Interfaces.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:ViDi.NET.Interfaces.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:ViDi.NET.Interfaces.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:ViDi.NET.Interfaces.Properties.Resources.Advanced">
            <summary>
              Looks up a localized string similar to Advanced.
            </summary>
        </member>
        <member name="P:ViDi.NET.Interfaces.Properties.Resources.Base">
            <summary>
              Looks up a localized string similar to Base.
            </summary>
        </member>
        <member name="P:ViDi.NET.Interfaces.Properties.Resources.Black">
            <summary>
              Looks up a localized string similar to Black.
            </summary>
        </member>
        <member name="P:ViDi.NET.Interfaces.Properties.Resources.Both">
            <summary>
              Looks up a localized string similar to Both.
            </summary>
        </member>
        <member name="P:ViDi.NET.Interfaces.Properties.Resources.External_Fixture">
            <summary>
              Looks up a localized string similar to External Fixture.
            </summary>
        </member>
        <member name="P:ViDi.NET.Interfaces.Properties.Resources.External_ROI">
            <summary>
              Looks up a localized string similar to External ROI.
            </summary>
        </member>
        <member name="P:ViDi.NET.Interfaces.Properties.Resources.Horizontal">
            <summary>
              Looks up a localized string similar to Horizontal.
            </summary>
        </member>
        <member name="P:ViDi.NET.Interfaces.Properties.Resources.Huge">
            <summary>
              Looks up a localized string similar to Huge.
            </summary>
        </member>
        <member name="P:ViDi.NET.Interfaces.Properties.Resources.Internal">
            <summary>
              Looks up a localized string similar to Internal.
            </summary>
        </member>
        <member name="P:ViDi.NET.Interfaces.Properties.Resources.Large">
            <summary>
              Looks up a localized string similar to Large.
            </summary>
        </member>
        <member name="P:ViDi.NET.Interfaces.Properties.Resources.LicenseType_ViDiInternal">
            <summary>
              Looks up a localized string similar to ViDiInternal.
            </summary>
        </member>
        <member name="P:ViDi.NET.Interfaces.Properties.Resources.LincenseType_LabelingOnly">
             <summary>
               Looks up a localized string similar to LabelingOnly
            .
             </summary>
        </member>
        <member name="P:ViDi.NET.Interfaces.Properties.Resources.LincenseType_RuntimeRedGreenFocusedOnly">
            <summary>
              Looks up a localized string similar to RuntimeRedGreenFocusedOnly.
            </summary>
        </member>
        <member name="P:ViDi.NET.Interfaces.Properties.Resources.LincenseType_TrainRedGreenFocusedOnly">
            <summary>
              Looks up a localized string similar to TrainRedGreenFocusedOnly.
            </summary>
        </member>
        <member name="P:ViDi.NET.Interfaces.Properties.Resources.Mask">
            <summary>
              Looks up a localized string similar to Mask.
            </summary>
        </member>
        <member name="P:ViDi.NET.Interfaces.Properties.Resources.Medium">
            <summary>
              Looks up a localized string similar to Medium.
            </summary>
        </member>
        <member name="P:ViDi.NET.Interfaces.Properties.Resources.None">
            <summary>
              Looks up a localized string similar to None.
            </summary>
        </member>
        <member name="P:ViDi.NET.Interfaces.Properties.Resources.Overlay">
            <summary>
              Looks up a localized string similar to Overlay.
            </summary>
        </member>
        <member name="P:ViDi.NET.Interfaces.Properties.Resources.PC">
            <summary>
              Looks up a localized string similar to PC.
            </summary>
        </member>
        <member name="P:ViDi.NET.Interfaces.Properties.Resources.Percent">
            <summary>
              Looks up a localized string similar to Percent.
            </summary>
        </member>
        <member name="P:ViDi.NET.Interfaces.Properties.Resources.Pixel">
            <summary>
              Looks up a localized string similar to Pixel.
            </summary>
        </member>
        <member name="P:ViDi.NET.Interfaces.Properties.Resources.Read">
            <summary>
              Looks up a localized string similar to Read.
            </summary>
        </member>
        <member name="P:ViDi.NET.Interfaces.Properties.Resources.Reflect">
            <summary>
              Looks up a localized string similar to Reflect.
            </summary>
        </member>
        <member name="P:ViDi.NET.Interfaces.Properties.Resources.Replicate">
            <summary>
              Looks up a localized string similar to Replicate.
            </summary>
        </member>
        <member name="P:ViDi.NET.Interfaces.Properties.Resources.Runtime">
            <summary>
              Looks up a localized string similar to Runtime.
            </summary>
        </member>
        <member name="P:ViDi.NET.Interfaces.Properties.Resources.Small">
            <summary>
              Looks up a localized string similar to Small.
            </summary>
        </member>
        <member name="P:ViDi.NET.Interfaces.Properties.Resources.Standard">
            <summary>
              Looks up a localized string similar to Standard.
            </summary>
        </member>
        <member name="P:ViDi.NET.Interfaces.Properties.Resources.Supervised">
            <summary>
              Looks up a localized string similar to Supervised.
            </summary>
        </member>
        <member name="P:ViDi.NET.Interfaces.Properties.Resources.Supervised_Variant_B">
            <summary>
              Looks up a localized string similar to Supervised-Variant-B.
            </summary>
        </member>
        <member name="P:ViDi.NET.Interfaces.Properties.Resources.Tiny">
            <summary>
              Looks up a localized string similar to Tiny.
            </summary>
        </member>
        <member name="P:ViDi.NET.Interfaces.Properties.Resources.Training">
            <summary>
              Looks up a localized string similar to Training.
            </summary>
        </member>
        <member name="P:ViDi.NET.Interfaces.Properties.Resources.Transparent">
            <summary>
              Looks up a localized string similar to Transparent.
            </summary>
        </member>
        <member name="P:ViDi.NET.Interfaces.Properties.Resources.Unavailable">
            <summary>
              Looks up a localized string similar to Unavailable.
            </summary>
        </member>
        <member name="P:ViDi.NET.Interfaces.Properties.Resources.Unsupervised">
            <summary>
              Looks up a localized string similar to Unsupervised.
            </summary>
        </member>
        <member name="P:ViDi.NET.Interfaces.Properties.Resources.Vertical">
            <summary>
              Looks up a localized string similar to Vertical.
            </summary>
        </member>
        <member name="P:ViDi.NET.Interfaces.Properties.Resources.White">
            <summary>
              Looks up a localized string similar to White.
            </summary>
        </member>
        <member name="P:ViDi.NET.Interfaces.Properties.Resources.Wrap">
            <summary>
              Looks up a localized string similar to Wrap.
            </summary>
        </member>
        <member name="P:ViDi.NET.Interfaces.Properties.Resources.Write">
            <summary>
              Looks up a localized string similar to Write.
            </summary>
        </member>
        <member name="T:ViDi.NET.Interfaces.WorkspaceRecipientType">
            <summary>
            Describes the kinds of entities with which workspaces can be shared.
            </summary>
        </member>
        <member name="T:ViDi.NET.Interfaces.WorkspaceRecipient">
            <summary>
            Describes an entity with which a workspace has been shared.
            </summary>
        </member>
        <member name="T:ViDi2.DisplayNameAttribute">
            <summary>
            Specifies a display name for a component.
            </summary>
        </member>
        <member name="M:ViDi2.DisplayNameAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ViDi2.DisplayNameAttribute"/> class with a display name.
            </summary>
            <param name="text">The display name text.</param>
        </member>
        <member name="M:ViDi2.DisplayNameAttribute.#ctor(System.Type,System.String)">
            <summary>
             Initializes a new instance of the <see cref="T:ViDi2.DisplayNameAttribute"/>
             using the string from a resource file that is identified by <paramref name="resourceType"/>.
            </summary>
            <param name="resourceType"> The auto-generated resource class that contains the string to
             lookup. </param>
            <param name="resourceKey"> The resource key of the localized string to use. </param>
        </member>
        <member name="M:ViDi2.DisplayNameAttribute.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ViDi2.DisplayNameAttribute"/> class with a display name.
            </summary>
            <param name="text">The display name text.</param>
            <param name="shorttext">The display name short text.</param>
        </member>
        <member name="M:ViDi2.DisplayNameAttribute.#ctor(System.Type,System.String,System.String)">
            <summary>
             Initializes a new instance of the <see cref="T:ViDi2.DisplayNameAttribute"/>
             using the string from a resource file that is identified by <paramref name="resourceType"/>.
            </summary>
            <param name="resourceType"> The auto-generated resource class that contains the string to
             lookup. </param>
            <param name="resourceKey"> The resource key of the localized string to use. </param>
            <param name="shortText">The display name short text.</param>
        </member>
        <member name="P:ViDi2.DisplayNameAttribute.DisplayName">
            <summary>
            Gets the display name.
            </summary>
            <value>The display name.</value>
        </member>
        <member name="P:ViDi2.DisplayNameAttribute.ShortDisplayName">
            <summary>
            Gets the short display name.
            </summary>
            <value>The short display name.</value>
        </member>
        <member name="T:ViDi2.Training.Filter">
            <summary>
            Represents a view filter
            </summary>
        </member>
        <member name="M:ViDi2.Training.Filter.#ctor">
            <summary>
            Creates a default empty filter
            </summary>
        </member>
        <member name="M:ViDi2.Training.Filter.#ctor(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Creates a new filter
            </summary>
            <param name="name">the name of the filter (display only)</param>
            <param name="filter">the filter string</param>
            <param name="sortCriteria">the sorting criteria</param>
            <param name="ascending">true to sort in ascending order</param>
        </member>
        <member name="P:ViDi2.Training.Filter.Name">
            <summary>
            Gets or sets the name of the filter
            </summary>
        </member>
        <member name="P:ViDi2.Training.Filter.Value">
            <summary>
            Gets or sets the actual filter value
            </summary>
        </member>
        <member name="P:ViDi2.Training.Filter.SortCriteria">
            <summary>
            Gets or sets the sorting criteria
            </summary>
        </member>
        <member name="P:ViDi2.Training.Filter.Ascending">
            <summary>
            Gets or sets whether to sort in ascending order
            </summary>
        </member>
        <member name="M:ViDi2.Training.Filter.Equals(ViDi2.Training.Filter)">
            <summary>
            Compares all fields of both Filters.
            </summary>
            <param name="other">The Filter that is being compared to</param>
            <returns>True if all fields match all other fields</returns>
        </member>
        <member name="T:ViDi2.Training.RecentFiltersQueue">
            <summary>
            Contains the recently used filters for a tool
            </summary>
        </member>
        <member name="M:ViDi2.Training.RecentFiltersQueue.Enqueue(ViDi2.Training.Filter)">
            <summary>
            Adds a given filter to the list of recent filters if it isn't empty and isn't already in the list
            </summary>
            <param name="MostRecentFilter">The most recent filter entered by a user. It will be placed at the beginning of the queue.</param>
            <returns>true if the filter was enqueued, false otherwise</returns>
        </member>
        <member name="P:ViDi2.Training.RecentFiltersQueue.Front">
            <summary>
            The front of the recently used filters queue.
            </summary>
        </member>
        <member name="F:ViDi2.Training.RecentFiltersQueue._SizeLimit">
            <summary>
            The maximum size of the queue.
            </summary>
        </member>
        <member name="T:ViDi2.Training.ClearViewMode">
            <summary>
            Represents the available modes of clearing a view
            </summary>
        </member>
        <member name="F:ViDi2.Training.ClearViewMode.Marking">
            <summary>
            Clear the marking as set by the tool
            </summary>
        </member>
        <member name="F:ViDi2.Training.ClearViewMode.Label">
            <summary>
            Clears the labels set manually
            </summary>
        </member>
        <member name="F:ViDi2.Training.ClearViewMode.Both">
            <summary>
            Clear both, marking and labels
            </summary>
        </member>
        <member name="T:ViDi2.Training.RenameMode">
            <summary>
            Represents the available modes to rename images
            </summary>
        </member>
        <member name="F:ViDi2.Training.RenameMode.OldFilename">
            <summary>
            Appends the old filename to the given prefix
            </summary>
        </member>
        <member name="F:ViDi2.Training.RenameMode.Index">
            <summary>
            Appends a running index to the given prefix, e.g. img-000.png, img-001.png, ...
            </summary>
        </member>
        <member name="F:ViDi2.Training.RenameMode.RandomIndex">
            <summary>
            Appends a running, but random, index to the given prefix
            </summary>
        </member>
        <member name="T:ViDi2.Training.SortedViewKey">
            <summary>
            Holds a view's key along with its sorting value and size
            </summary>
        </member>
        <member name="P:ViDi2.Training.SortedViewKey.Size">
            <summary>
            Gets the view's size
            </summary>
        </member>
        <member name="P:ViDi2.Training.SortedViewKey.SortValue">
            <summary>
            Gets the view's soriting criteria
            </summary>
        </member>
        <member name="T:ViDi2.Training.IDatabase">
            <summary>
            Represents the database
            </summary>
        </member>
        <member name="P:ViDi2.Training.IDatabase.Stream">
            <summary>
            Gets the stream this database belongs to
            </summary>
        </member>
        <member name="M:ViDi2.Training.IDatabase.AddImage(ViDi2.IImage,System.String)">
            <summary>
            Adds an image to the stream
            </summary>
            <param name="image">the image</param>
            <param name="name">the image name</param>
            <returns>the name under which it was actually added</returns>
        </member>
        <member name="M:ViDi2.Training.IDatabase.AddImage(System.IO.Stream,System.String)">
            <summary>
            Adds an image from an IO stream
            </summary>
            <param name="stream">the IO stream with the image data
            in one of the supported formats, i.e. PNG, JPEG, MBP or TIFF</param>
            <param name="name">the image name</param>
            /// <returns>the name under which it was actually added</returns>
        </member>
        <member name="M:ViDi2.Training.IDatabase.AddSamplesToSet(System.String,System.String)">
            <summary>
            Adds the selected samples to the given set
            </summary>
            <param name="filter">filter to select the samples</param>
            <param name="set">the name of the set</param>
        </member>
        <member name="M:ViDi2.Training.IDatabase.RemoveSamplesFromSet(System.String,System.String)">
            <summary>
            Removes the selected samples from the given set
            </summary>
            <param name="filter">filter to select the samples</param>
            <param name="set">the name of the set</param>
        </member>
        <member name="M:ViDi2.Training.IDatabase.ChangeSetColor(System.String,System.String)">
            <summary>
            Changes the color associated to a named set
            </summary>
            <param name="setName">the name of the set</param>
            <param name="color">the color</param>
        </member>
        <member name="M:ViDi2.Training.IDatabase.RemoveImages(System.String)">
            <summary>
            Removes the selected images from the database/stream
            </summary>
            <param name="filter">filter to select the images</param>
        </member>
        <member name="M:ViDi2.Training.IDatabase.RenameImages(System.String,System.String,ViDi2.Training.RenameMode)">
            <summary>
            Renames the selected images
            </summary>
            <param name="filter">filter to select the images</param>
            <param name="prefix">string to use as a prefix of the new image names</param>
            <param name="mode">controls what is appended to the new image names</param>
        </member>
        <member name="P:ViDi2.Training.IDatabase.IsScanning">
            <summary>
            Gets value indicating whether the database was scanning for new images
            during the last call to List
            </summary>
        </member>
        <member name="M:ViDi2.Training.IDatabase.List(System.String,System.String,System.Boolean)">
            <summary>
            Gets the selected view-keys
            </summary>
            <param name="filter">filter selecting the view-keys</param>
            <param name="sortCriteria">the sorting criteria </param>
            <param name="ascending">sort in ascending order if true, descending otherwise</param>
            <returns>a list view key/size pairs</returns>
        </member>
        <member name="M:ViDi2.Training.IDatabase.Summary(System.String)">
            <summary>
            Gets an XML document providing a summary of the database statistics
            </summary>
            <param name="options">optional parameters to select the type of statistics</param>
            <returns>an XML document</returns>
        </member>
        <member name="M:ViDi2.Training.IDatabase.GetMarking(ViDi2.FrameKey)">
            <summary>
            Gets the marking of an image
            </summary>
            <param name="key">key identifying the sample</param>
            <returns>a Marking structure</returns>
        </member>
        <member name="M:ViDi2.Training.IDatabase.GetMarking(ViDi2.FrameKey,System.String)">
            <summary>
            Gets the marking of an image
            </summary>
            <param name="key">key identifying the sample</param>
            <param name="axisFilter">filter to select axis items in the marking</param>
            <returns>a Marking structure</returns>
        </member>
        <member name="M:ViDi2.Training.IDatabase.GetImage(ViDi2.FrameKey,System.String,System.UInt32)">
            <summary>
            Gets an image from the database
            </summary>
            <param name="key">key identifying the sample</param>
            <param name="width">if non-zero, rescale the returned image to the given width</param>
            <returns>the image</returns>
        </member>
        <member name="M:ViDi2.Training.IDatabase.DeferChangedSignal">
            <summary>
            Enters a defer cycle to merge changes in a single signal
            </summary>
            <returns>an IDisposable to trigger the signal</returns>
        </member>
        <member name="E:ViDi2.Training.IDatabase.Changed">
            <summary>
            Occurs when the database was changed
            </summary>
        </member>
        <member name="E:ViDi2.Training.IDatabase.ChangedAsync">
            <summary>
            Occurs when the database was changed
            each event handler is run asynchronously
            in another task
            </summary>
        </member>
        <member name="E:ViDi2.Training.IDatabase.ImagesRemoved">
            <summary>
            Occurs when images are removed
            </summary>
        </member>
        <member name="T:ViDi2.Training.DatabaseChangedHandler">
            <summary>
            Handler called when the database was modified
            </summary>
            <param name="viewKeys">the collection of keys identifying the views that were changed; if null, the complete database is invalidated</param>
        </member>
        <member name="T:ViDi2.Training.ImagesRemovedEventHandler">
            <summary>
            Handler called when images are removed
            </summary>
            <param name="fileNames">the collection of file names</param>
        </member>
        <member name="T:ViDi2.Training.ClassNameChangedHandler">
            <summary>
            Handler called when a class in a tool database is renamed.
            </summary>
            <param name="changes"> The changes to a class that prompted the event to be raised. </param>
        </member>
        <member name="T:ViDi2.Training.ClassColorChangedHandler">
            <summary>
            Handler called when a class in a tool database is assigned a new color.
            </summary>
            <param name="changes"> The changes to a class that prompted the event to be raised. </param>
        </member>
        <member name="T:ViDi2.Training.BeforeProcessHandler">
            <summary>
            Handler called when a tool database has been instructed to process
            a given set of views, but before those views are processed.
            </summary>
            <remarks>
            Integrators can use this to ensure that external fixtures are up
            to date before processing, for example.
            </remarks>
            <param name="viewsToBeProcessed"> The collection of views the database was instructed to process. </param>
        </member>
        <member name="T:ViDi2.Training.IToolDatabase">
            <summary>
            Represents the tool database
            </summary>
        </member>
        <member name="P:ViDi2.Training.IToolDatabase.Tool">
            <summary>
            Gets the tool this database belongs to
            </summary>
        </member>
        <member name="M:ViDi2.Training.IToolDatabase.AcceptViews(System.String)">
            <summary>
            Accept the marking of the selected views as label
            </summary>
            <param name="filter">filter selecting the views</param>
        </member>
        <member name="P:ViDi2.Training.IToolDatabase.Parameters">
            <summary>
            database parameters
            </summary>
        </member>
        <member name="M:ViDi2.Training.IToolDatabase.ClearViews(System.String,ViDi2.Training.ClearViewMode)">
            <summary>
            Clears the marking, the label or both for the selected views
            </summary>
            <param name="filter">filter selecting the views</param>
            <param name="mode">enum specifiying whether to clear the marking, the label or both</param>
        </member>
        <member name="M:ViDi2.Training.IToolDatabase.ClearTrainingSet">
            <summary>
            Clears the training flag for all views
            </summary>
        </member>
        <member name="M:ViDi2.Training.IToolDatabase.ClearValidationSet">
            <summary>
            Clears the validation flag for all views
            </summary>
        </member>
        <member name="M:ViDi2.Training.IToolDatabase.SetBookmark(System.String,System.Boolean)">
            <summary>
            Set the bookmark for the selected views
            </summary>
            <param name="filter">filter selecting the eligible views</param>
            <param name="bookmark">the bookmark of the selected views</param>
        </member>
        <member name="M:ViDi2.Training.IToolDatabase.SetMemo(System.String,System.String)">
            <summary>
            Set the memo for the selected views
            </summary>
            <param name="filter">filter selecting the eligible views</param>
            <param name="memo">the memo of the selected views</param>
        </member>
        <member name="M:ViDi2.Training.IToolDatabase.SelectTrainingSet(System.String,System.Double)">
            <summary>
            Assigns views in the database to the training set
            </summary>
            <param name="filter">filter selecting the eligible views</param>
            <param name="count">determines the total number(&gt; 1) or percentage(&lt; 1) of views to select</param>
            <remarks>the actual number of views selected may be bigger than what was requested in order
            to make sure that each feature / region / tag type is represented</remarks>
        </member>
        <member name="M:ViDi2.Training.IToolDatabase.SelectValidationSet(System.String,System.Double)">
            <summary>
            Assigns views in the database to the validation set 
            </summary>
            <param name="filter">filter selecting the eligible views</param>
            <param name="count">determines the total number(&gt; 1) or percentage(&lt; 1) of views to select</param>
            <remarks>the actual number of views selected may be bigger than what was requested in order 
            to make sure that each feature / region / tag type is represented</remarks>
        </member>
        <member name="M:ViDi2.Training.IToolDatabase.GetValidTrainingSet(System.Collections.Generic.List{System.Tuple{System.String,ViDi2.IView}},System.String@,System.String@)">
            <summary>
            Get valid views to add training set
            </summary>
            <param name="keyViewPairs">key, IView pairs</param>
            <param name="filter">return new filter for valid views</param>
            <param name="resMsg">return reasons for invalid views</param>
        </member>
        <member name="M:ViDi2.Training.IToolDatabase.SetTrainFlag(System.String,System.Boolean)">
            <summary>
            Sets the training flag for the selected views manually
            </summary>
            <param name="filter">filter selecting the views</param>
            <param name="flag">the training flag</param>
        </member>
        <member name="M:ViDi2.Training.IToolDatabase.SetViewGroup(System.String,System.String)">
            <summary>
            Sets the group for the selected views
            </summary>
            <param name="filter">filter selecting the views</param>
            <param name="group">the group name</param>
        </member>
        <member name="M:ViDi2.Training.IToolDatabase.SetViewMask(System.String,ViDi2.IImage)">
            <summary>
            Sets the mask for the selected views
            </summary>
            <param name="filter">filter selecting the views</param>
            <param name="mask">the mask image</param>
        </member>
        <member name="M:ViDi2.Training.IToolDatabase.GetViewMask(ViDi2.Training.ViewKey)">
            <summary>
            Gets the mask of a view
            </summary>
            <param name="viewKey">key of the source view</param>
            <returns>the mask image</returns>
        </member>
        <member name="M:ViDi2.Training.IToolDatabase.GetOverlayImage(ViDi2.Training.ViewKey,System.String,System.UInt32)">
            <summary>
            Gets the overlay image for a view
            </summary>
            <param name="viewKey">key of the source view</param>
            <param name="options">optional parameters controlling the rendering</param>
            <param name="width">if non-zero, the width of the generated overlay image</param>
            <returns>the overlay image</returns>
        </member>
        <member name="M:ViDi2.Training.IToolDatabase.GetViewImage(ViDi2.Training.ViewKey,System.String,System.UInt32)">
            <summary>
            Gets the image of a view, i.e. the source image cropped to the ROI of the view
            </summary>
            <param name="viewKey">key of the source view</param>
            <param name="width">if non-zero, the width to which the image is scaled</param>
            <returns>the view image</returns>
        </member>
        <member name="E:ViDi2.Training.IToolDatabase.BeforeProcess">
            <summary>
            Raised when the tool's Database is instructed to process the views matching a
            particular filter, but before the tool actually does the processing.
            </summary>
        </member>
        <member name="M:ViDi2.Training.IToolDatabase.Process(System.String,System.Boolean,System.Collections.Generic.List{System.Int32})">
            <summary>
            Processes the images in the database
            </summary>
            <param name="filter">filter criteria selecting the images</param>
            <param name="asynchronous">if true, will return immediately</param>
        </member>
        <member name="M:ViDi2.Training.IToolDatabase.Update(System.String,System.Boolean,System.Boolean)">
            <summary>
            Updates the images in the database (without processing)
            </summary>
            <param name="filter">filter criteria selecting the images</param>
            <param name="asynchronous">if true, will return immediately</param>
            <param name="updateCurrentViews">if true, will update the current views in the Viewer and DatabaseExplorer</param>
        </member>
        <member name="M:ViDi2.Training.IToolDatabase.UpdateLabels(System.Boolean,System.Boolean)">
            <summary>
            Updates the database to reflect the latest tool parameters (without processing)
            </summary>
            <param name="asynchronous">if true, will return immediately</param>
            <param name="updateCurrentViews">if true, will update the current views in the Viewer and DatabaseExplorer</param>
        </member>
        <member name="M:ViDi2.Training.IToolDatabase.UpdateLabeledTags">
            <summary>
            Updates the database parameters for labeled tags (only Green HDM)
            </summary>
        </member>
        <member name="M:ViDi2.Training.IToolDatabase.ClearUncertainty(System.String)">
            <summary>
            Clear uncertainty of all views (Set to -1)
            </summary>
            <param name="filter">filter criteria selecting the images</param>
        </member>
        <member name="E:ViDi2.Training.IToolDatabase.ClassNameChanged">
            <summary> Raised when a class in the database is assigned a name. </summary>
        </member>
        <member name="E:ViDi2.Training.IToolDatabase.ClassColorChanged">
            <summary> Raised when a class in the database is assigned a color. </summary>
        </member>
        <member name="T:ViDi2.Training.IBlueDatabase">
            <summary>
            Represents the specialization of the database for the blue tool
            </summary>
        </member>
        <member name="P:ViDi2.Training.IBlueDatabase.Tool">
            <summary>
            Gets the blue tool this database belongs to
            </summary>
        </member>
        <member name="M:ViDi2.Training.IBlueDatabase.AddFeature(ViDi2.Training.ViewKey,System.String,ViDi2.Point,System.Double,System.Double)">
            <summary>
            Adds a labeled feature to the view
            </summary>
            <param name="viewKey">key selecting the target view</param>
            <param name="id">the feature ID</param>
            <param name="position">the feature position</param>
            <param name="angle">the feature angle</param>
            <param name="size">the feature size</param>
        </member>
        <member name="M:ViDi2.Training.IBlueDatabase.SetFeature(ViDi2.Training.ViewKey,System.Int32,System.String,ViDi2.Point,System.Double,System.Double)">
            <summary>
            Changes a labeled feature in the view
            </summary>
            <param name="viewKey">key selecting the target view</param>
            <param name="index">index of the labeled feature to change (&lt;0 to add a new)</param>
            <param name="id">the feature ID</param>
            <param name="position">the feature position</param>
            <param name="angle">the feature angle</param>
            <param name="size">the feature size</param>
        </member>
        <member name="M:ViDi2.Training.IBlueDatabase.SetFeature(ViDi2.Training.ViewKey,System.Int32,System.String,ViDi2.Point,System.Double,ViDi2.Size)">
            <summary>
            Changes a labeled feature in the view
            </summary>
            <param name="viewKey">key selecting the target view</param>
            <param name="index">index of the labeled feature to change (&lt;0 to add a new)</param>
            <param name="id">the feature ID</param>
            <param name="position">the feature position</param>
            <param name="angle">the feature angle</param>
            <param name="size">the feature size</param>
        </member>
        <member name="M:ViDi2.Training.IBlueDatabase.RemoveFeature(ViDi2.Training.ViewKey,System.Boolean,System.Int32)">
            <summary>
            Removes a feature from the view
            </summary>
            <param name="viewKey">key selecting the target view</param>
            <param name="labeled">true if the feature is labeled, false otherwise</param>
            <param name="index">index of the feature</param>
        </member>
        <member name="M:ViDi2.Training.IBlueDatabase.GetMarking(ViDi2.FrameKey)">
            <summary>
            Gets the marking of an image
            </summary>
            <param name="frameKey">key identifying the marking</param>
            <returns>a Marking structure</returns>
        </member>
        <member name="T:ViDi2.Training.IRedDatabase">
            <summary>
            Represents the specialization of the database for the red tool
            </summary>
        </member>
        <member name="P:ViDi2.Training.IRedDatabase.Tool">
            <summary>
            Gets the red tool this database belongs to
            </summary>
        </member>
        <member name="M:ViDi2.Training.IRedDatabase.LabelViews(System.String,System.String)">
            <summary>
            Labels all the views selected by filter to belong to the given className
            </summary>
            <param name="filter">filter to select the views</param>
            <param name="className">name of the class, for good: empty string, bad : "deviation" for unsupervised, "defect" for supervised.</param>
        </member>
        <member name="M:ViDi2.Training.IRedDatabase.SetRegionsImage(ViDi2.Training.ViewKey,System.String,ViDi2.IImage)">
            <summary>
            Assigns regions for a view from an image
            </summary>
            <param name="viewKey">ViewKey of the target view</param>
            <param name="className">name of the class:
            "defect" for a red supervised
            "deviation" for a red unsupervised
            </param>
            <param name="region">image from which to extract the regions</param>
        </member>
        <member name="M:ViDi2.Training.IRedDatabase.GetRegionsImage(ViDi2.Training.ViewKey,System.String)">
            <summary>
            Retrieves the regions for a view as a mask-image
            </summary>
            <param name="viewKey">key selecting the target view</param>
            <param name="className">name of the class:
            "defect" for a red supervised
            "deviation" for a red unsupervised
            </param>
            <returns>image containing the regions</returns>
        </member>
        <member name="M:ViDi2.Training.IRedDatabase.AddRegion(ViDi2.Training.ViewKey,System.String,System.Collections.Generic.IEnumerable{ViDi2.Point},System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{ViDi2.Point}})">
            <summary>
            Adds a region to the view
            </summary>
            <param name="viewKey">key selecting the target view</param>
            <param name="className">name of the class:
            "defect" for a red supervised
            "deviation" for a red unsupervised
            </param>
            <param name="outer">list of points describing the region's outer contour</param>
            <param name="inners">list of inner contours</param>
        </member>
        <member name="M:ViDi2.Training.IRedDatabase.RemoveRegion(ViDi2.Training.ViewKey,System.Boolean,System.Int32)">
            <summary>
            Removes a region from the view
            </summary>
            <param name="viewKey">key selecting the target view</param>
            <param name="labeled">true if the region is labeled, false otherwise</param>
            <param name="index">the region index</param>
        </member>
        <member name="M:ViDi2.Training.IRedDatabase.GetMarking(ViDi2.FrameKey)">
            <summary>
            Gets the marking of an image
            </summary>
            <param name="frameKey">key identifying the marking</param>
            <returns>a Marking structure</returns>
        </member>
        <member name="M:ViDi2.Training.IRedDatabase.LoadALModel(System.Collections.Generic.List{System.Int32},System.Int32@,System.Int32@)">
            <summary>
            Load AIAL Models
            </summary>
            <param name="gpuDevice">GPU Index for AIAL Model</param>
            <param name="encoderGPU">Successfully allocated GPU index for encoder</param>
            <param name="decoderGPU">Successfully allocated GPU index for decoder</param>
        </member>
        <member name="M:ViDi2.Training.IRedDatabase.UnloadALModel(System.Int32,System.Int32)">
            <summary>
            Unload AIAL Models
            </summary>
            <param name="encoderGPU">Allocated GPU index for encoder model</param>
            <param name="decoderGPU">Allocated GPU index for decoder model</param>
        </member>
        <member name="M:ViDi2.Training.IRedDatabase.EncodeImage(System.Int32,ViDi2.IImage,ViDi2.Training.ViewKey)">
            <summary>
            Encoding image to auto label
            </summary>
            <param name="gpuIndex">GPU Index for AIAL Model</param>
            <param name="image">Target image to AIAL</param>
            <param name="viewKey">ViewKey of the target view</param>
        </member>
        <member name="M:ViDi2.Training.IRedDatabase.DecodeImage(System.Int32,ViDi2.IImage,ViDi2.Training.ViewKey,System.Collections.Generic.List{System.Int32})">
            <summary>
            Decoding image to auto label
            </summary>
            <param name="gpuIndex">GPU Index for AIAL Model</param>
            <param name="image">Target image to AIAL</param>
            <param name="viewKey">ViewKey of the target view</param>
            <param name="points">index 0: position x, 1: position y, 2: label</param>
        </member>
        <member name="M:ViDi2.Training.IRedDatabase.DecodeImage(System.Int32,ViDi2.IImage,ViDi2.Training.ViewKey,System.Collections.Generic.List{ViDi2.Rect})">
            <summary>
            Decoding image to auto label
            </summary>
            <param name="gpuIndex">GPU Index for AIAL Model</param>
            <param name="image">Target image to AIAL</param>
            <param name="viewKey">ViewKey of the target view</param>
            <param name="boundBoxes">rectangle to AIAL</param>
        </member>
        <member name="T:ViDi2.Training.IGreenDatabase">
            <summary>
            Represents the specialization of the database for the green tool
            </summary>
        </member>
        <member name="P:ViDi2.Training.IGreenDatabase.Tool">
            <summary>
            Gets the green tool this database belongs to
            </summary>
        </member>
        <member name="P:ViDi2.Training.IGreenDatabase.Parameters">
            <summary>
            green database parameters
            </summary>
        </member>
        <member name="M:ViDi2.Training.IGreenDatabase.Tag(System.String,System.String,System.Boolean)">
            <summary>
            Tags the selected views
            </summary>
            <param name="filter">filter selecting the view-keys</param>
            <param name="value">the tag name or a regular expression</param>
            <param name="extractFromFilename">if true, extract the tag from the filename using the passed regular expression</param>
        </member>
        <member name="M:ViDi2.Training.IGreenDatabase.GetMarking(ViDi2.FrameKey)">
            <summary>
            Gets the marking of an image
            </summary>
            <param name="frameKey">key identifying the marking</param>
            <returns>a Marking structure</returns>
        </member>
        <member name="M:ViDi2.Training.IGreenDatabase.SetSimilarityReference(System.String)">
            <summary>
            Set selected views as references views for the similarity model, removing any previous references
            </summary>
            <param name="filter">filter selecting the views that are set as the new reference views</param>
        </member>
        <member name="M:ViDi2.Training.IGreenDatabase.UpdateUnknownViews(System.String)">
            <summary>
            Updates the unknown views
            </summary>
            <param name="filter">filter selecting the views that are set as the new reference views</param>
        </member>
        <member name="T:ViDi2.Training.IImageCache">
            <summary>
            Represents a local image cache
            </summary>
        </member>
        <member name="P:ViDi2.Training.IImageCache.CurrentWorkspace">
            <summary>
            Sets the currently selected workspace
            </summary>
        </member>
        <member name="M:ViDi2.Training.IImageCache.Get(ViDi2.Training.IStream,ViDi2.FrameKey,System.DateTime,System.String,System.UInt32,ViDi2.Training.ITool)">
            <summary>
            Gets an image from the cache for a specific stream or tool
            </summary>
            <param name="stream">the stream the image belongs to</param>
            <param name="frameKey">key identifying the sample</param>
            <param name="timeAdded">the date when the marking was added</param>
            <param name="width">if non-zero, rescale the returned image to the given width</param>
            <param name="tool">the tool the image belongs to</param>
            <returns>the image</returns>
        </member>
        <member name="M:ViDi2.Training.IImageCache.Clear(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Clears the golbal, workpace, stream, or tool cache
            </summary>
            <param name="workspaceUniqueName">workspace unique name</param>
            <param name="streamUuid">stream's UUID</param>
            <param name="toolUuid">tool's UUID</param>
            <param name="async">if true, will return immediately</param>
        </member>
        <member name="M:ViDi2.Training.IImageCache.Clear(System.Collections.Generic.IEnumerable{ViDi2.Training.ViewKey},System.String,System.String,System.String,System.Boolean)">
            <summary>
            Clears the selected images from the cache
            </summary>
            <param name="viewKeys">the images to clear</param>
            <param name="workspaceUniqueName">workspace unique name</param>
            <param name="streamUuid">stream's UUID</param>
            <param name="toolUuid">tool's UUID</param>
            <param name="async">if true, will return immediately</param>
        </member>
        <member name="M:ViDi2.Training.ILibraryAccess.HasAutoSave(ViDi2.WorkspaceName,ViDi2.ILibraryAccessContext)">
            <summary>
            Determines if the given workspace has an autosave that can
            be loaded to restore work that was not manually saved.
            </summary>
            <param name="workspace"> The workspace's unique name. </param>
            <param name="context"></param>
            <returns> True if an autosave is available for the given workspace. </returns>
        </member>
        <member name="M:ViDi2.Training.ILibraryAccess.CreateWorkspace(ViDi2.WorkspaceName,ViDi2.ILibraryAccessContext)">
            <summary>
            Creates a new workspace, with the given display name (if
            the name is valid).
            </summary>
            <param name="workspaceDisplayName"> The human-readable name for the workspace. </param>
            <param name="context"></param>
            <returns> The workspace's identifier (e.g. the display name for local workspaces, or some ID for cloud workspaces). </returns>
        </member>
        <member name="M:ViDi2.Training.ILibraryAccess.RenameWorkspace(ViDi2.WorkspaceName,System.String,ViDi2.ILibraryAccessContext)">
            <summary>
            Renames the DisplayName of the given workspace
            to the given display name (if valid).
            </summary>
            <param name="workspace"> The unique name identifying the workspace to rename. </param>
            <param name="newDisplayName"> The new human-readable display name for the workspace. </param>
            <param name="context"></param>
            <returns> The workspace's unique identifier (e.g. the new display name for local workspaces, or some ID for cloud workspaces). </returns>
        </member>
        <member name="M:ViDi2.Training.ILibraryAccess.ImportWorkspaceFromMemory(ViDi2.WorkspaceName,System.IO.Stream,ViDi2.ILibraryAccessContext)">
            <summary>
            Creates a new workspace from the given stream (if a valid workspace)
            with the given display name.
            </summary>
            <param name="workspaceDisplayName"> The human-readable name for the workspace. </param>
            <param name="stream"> A stream containing the workspace to import. </param>
            <param name="context"></param>
            <returns> The workspace's identifier (e.g. the display name for local workspaces, or some ID for cloud workspaces). </returns>
        </member>
        <member name="M:ViDi2.Training.ILibraryAccess.GetLossGraphData(ViDi2.WorkspaceName,ViDi2.StreamName,ViDi2.ToolName,System.Boolean,System.UInt32,ViDi2.ILibraryAccessContext)">
            <summary>
            Get the loss graph data for the HDM Tool
            </summary>
            <param name="workspace"> The name of the workspace containing the tool. </param>
            <param name="stream"> The name of the stream containing the tool. </param>
            <param name="tool"> The name of the tool. </param>
            <param name="is_realtime"> True to get loss graph data from last_idx +1 to the final index, false to get all loss graph data. </param>
            <param name="last_idx"> The index in loss graph which was referenced in the last call of this method. This index is the one right before the starting index from which data you wanted to get. </param>
            <param name="context"> Null, as this parameter is currently disabled. </param>
            <returns> Buffer to hold the XML fragment of the loss graph data. </returns>
        </member>
        <member name="M:ViDi2.Training.ILibraryAccess.RestoreLossGraphData(ViDi2.WorkspaceName,ViDi2.StreamName,ViDi2.ToolName,ViDi2.ILibraryAccessContext)">
            <summary>
            Restore the backed up loss graph data for the HDM Tool
            </summary>
            <param name="workspace"> The name of the workspace containing the tool. </param>
            <param name="stream"> The name of the stream containing the tool. </param>
            <param name="tool"> The name of the tool. </param>
            <param name="context"> Null, as this parameter is currently disabled. </param>
        </member>
        <member name="M:ViDi2.Training.ILibraryAccess.ClearBackupLossGraphData(ViDi2.WorkspaceName,ViDi2.StreamName,ViDi2.ToolName,ViDi2.ILibraryAccessContext)">
            <summary>
            Clear the backed up loss graph data for the HDM Tool
            </summary>
            <param name="workspace"> The name of the workspace containing the tool. </param>
            <param name="stream"> The name of the stream containing the tool. </param>
            <param name="tool"> The name of the tool. </param>
            <param name="context"> Null, as this parameter is currently disabled. </param>
        </member>
        <member name="M:ViDi2.Training.ILibraryAccess.LabelChecker(ViDi2.WorkspaceName,ViDi2.StreamName,ViDi2.ToolName,System.String,ViDi2.ILibraryAccessContext)">
            <summary>
            Check label quality
            </summary>
            <param name="workspace"> The name of the workspace containing the tool. </param>
            <param name="stream"> The name of the stream containing the tool. </param>
            <param name="tool"> The name of the tool. </param>
            <param name="gpuDevices">The List of gpu where the tool can be trained on. </param>
            <param name="context"> Null, as this parameter is currently disabled. </param>
        </member>
        <member name="M:ViDi2.Training.ILibraryAccess.ClearUncertainty(ViDi2.WorkspaceName,ViDi2.StreamName,ViDi2.ToolName,System.String,ViDi2.ILibraryAccessContext)">
            <summary>
            Clear the uncertainty of all views
            </summary>
            <param name="workspace"> The name of the workspace containing the tool. </param>
            <param name="stream"> The name of the stream containing the tool. </param>
            <param name="tool"> The name of the tool. </param>
            <param name="filter"> The filter used to select the samples, empty str ("") = all samples </param>
            <param name="context"> Null, as this parameter is currently disabled. </param>
        </member>
        <member name="M:ViDi2.Training.ILibraryAccess.UpdateUnknownViews(ViDi2.WorkspaceName,ViDi2.StreamName,ViDi2.ToolName,System.String,ViDi2.ILibraryAccessContext)">
            <summary>
            Updates the unknown views
            </summary>
            <param name="workspace"> The name of the workspace containing the tool. </param>
            <param name="stream"> The name of the stream containing the tool. </param>
            <param name="tool"> The name of the tool. </param>
            <param name="filter"> The filter used to select the samples, empty str ("") = all samples </param>
            <param name="context"> Null, as this parameter is currently disabled. </param>
        </member>
        <member name="T:ViDi2.Training.IRegionOfInterest">
            <summary>
            Represents a tools region-of-interest (ROI)
            </summary>
        </member>
        <member name="P:ViDi2.Training.IRegionOfInterest.Mask">
            <summary>
            Gets or sets the mask
            </summary>
        </member>
        <member name="M:ViDi2.Training.IRegionOfInterest.Preview(ViDi2.FrameKey)">
            <summary>
            Returns the list views for a specfic image in the database
            </summary>
            <param name="key">key selecting the frame to preview</param>
            <returns>a list of views</returns>
            <remarks>
            Creates a preview ROI when called, then caches any changes
            made to <see cref="P:ViDi2.Training.IRegionOfInterest.Parameters"/> of the ROI.
            Changes made to <see cref="P:ViDi2.Training.IRegionOfInterest.Parameters"/> become effective
            for next tool's process on next call to <see cref="M:ViDi2.Training.IRegionOfInterest.ApplyPreview"/> or
            are discarded with <see cref="M:ViDi2.Training.IRegionOfInterest.DiscardPreview"/>.
            </remarks>
            <seealso cref="M:ViDi2.Training.IRegionOfInterest.ApplyPreview"/>
            <seealso cref="M:ViDi2.Training.IRegionOfInterest.DiscardPreview"/>
        </member>
        <member name="M:ViDi2.Training.IRegionOfInterest.ApplyPreview">
            <summary>
            Apply any changes made to <see cref="P:ViDi2.Training.IRegionOfInterest.Parameters"/> (cf <see cref="M:ViDi2.Training.IRegionOfInterest.Preview(ViDi2.FrameKey)"/>)
            </summary>
            <seealso cref="M:ViDi2.Training.IRegionOfInterest.Preview(ViDi2.FrameKey)"/>
        </member>
        <member name="M:ViDi2.Training.IRegionOfInterest.DiscardPreview">
            <summary>
            Discard any changes made to <see cref="P:ViDi2.Training.IRegionOfInterest.Parameters"/> (cf <see cref="M:ViDi2.Training.IRegionOfInterest.Preview(ViDi2.FrameKey)"/>)
            </summary>
            <seealso cref="M:ViDi2.Training.IRegionOfInterest.Preview(ViDi2.FrameKey)"/>
        </member>
        <member name="P:ViDi2.Training.IRegionOfInterest.Parameters">
            <summary>
            Get the region of interest parameters
            </summary>
        </member>
        <member name="T:ViDi2.Training.IManualRegionOfInterest">
            <summary>
            Represents a manual ROI
            </summary>
        </member>
        <member name="P:ViDi2.Training.IManualRegionOfInterest.Parameters">
            <summary>
            Get the region of interest parameters
            </summary>
        </member>
        <member name="T:ViDi2.Training.IBlueRegionOfInterest">
            <summary>
            Represents an ROI based on the result of a blue tool
            </summary>
        </member>
        <member name="P:ViDi2.Training.IBlueRegionOfInterest.Parameters">
            <summary>
            Get the region of interest parameters
            </summary>
        </member>
        <member name="T:ViDi2.Training.IRedRegionOfInterest">
            <summary>
            Reprents an ROI based on the result of a red tool
            </summary>
        </member>
        <member name="P:ViDi2.Training.IRedRegionOfInterest.Parameters">
            <summary>
            Get the region of interest parameters
            </summary>
        </member>
        <member name="T:ViDi2.Training.IGreenRegionOfInterest">
            <summary>
            Reprents an ROI based on the result of a green tool
            </summary>
        </member>
        <member name="P:ViDi2.Training.IGreenRegionOfInterest.Parameters">
            <summary>
            Get the region of interest parameters
            </summary>
        </member>
        <member name="E:ViDi2.Training.IRegionOfInterestParameters.Changed">
            <summary>
            Occurs when any parameter has been changed
            </summary>
        </member>
        <member name="E:ViDi2.Training.IRegionOfInterestParameters.ChangedAsync">
            <summary>
            Occurs when any parameter has been changed
            each event handler is run asynchronously
            </summary>
        </member>
        <member name="T:ViDi2.Training.IStreamList">
            <summary>
            Represents a list of streams
            </summary>
        </member>
        <member name="M:ViDi2.Training.IStreamList.Add(System.String)">
            <summary>
            Adds a new stream
            </summary>
            <param name="name">name of the stream</param>
            <returns>reference to the newly created stream</returns>
        </member>
        <member name="M:ViDi2.Training.IStreamList.Move(System.String,ViDi2.Training.IWorkspace)">
            <summary>
            Moves the stream to another workspace
            </summary>
            <param name="workspace">the target workspace</param>
        </member>
        <member name="M:ViDi2.Training.IStreamList.Remove(System.String)">
            <summary>
            Removes a stream
            </summary>
            <param name="name">name of the stream</param>
        </member>
        <member name="T:ViDi2.Training.IStream">
            <summary>
            Represents a stream containing a tool-chain and a set of images
            </summary>
        </member>
        <member name="P:ViDi2.Training.IStream.Name">
            <summary>
            Gets or sets the name of the stream
            </summary>
        </member>
        <member name="P:ViDi2.Training.IStream.Parameters">
            <summary>
            Gets the stream parameters
            </summary>
        </member>
        <member name="M:ViDi2.Training.IStream.SetSampleMode(System.String,System.Int32)">
            <summary>
            Sets the stream's sample mode
            </summary>
            <param name="sampleNameRegex">the regular expression to extract sample names from image filenames
            and consequently to group images</param>
            <param name="frameWindow">the width of the sliding window over the image stack to form individual frames</param>
        </member>
        <member name="P:ViDi2.Training.IStream.SampleNameRegex">
            <summary>
            Gets the streams regular expression to extract the sample name from images
            </summary>
        </member>
        <member name="M:ViDi2.Training.IStream.SetSampleTitle(System.Int32,System.String)">
            <summary>
            Sets the stream's sample title
            </summary>
            <param name="sampleIndex">sample's index to update sample title</param>
            <param name="sampleTitle">new sample title</param>
        </member>
        <member name="P:ViDi2.Training.IStream.SampleTitles">
            <summary>
            Gets the stream's sample title list
            </summary>
        </member>
        <member name="P:ViDi2.Training.IStream.Workspace">
            <summary>
            Gets the parent workspace
            </summary>
        </member>
        <member name="P:ViDi2.Training.IStream.IsReady">
            <summary>
            Returns true of all the tools in the stream are ready, i.e. trained
            </summary>
        </member>
        <member name="P:ViDi2.Training.IStream.IsBusy">
            <summary>
            Returns true if any of the tools in the stream are busy, i.e. training or processing
            </summary>
        </member>
        <member name="M:ViDi2.Training.IStream.Clone(System.String)">
            <summary>
            Clones the stream
            </summary>
            <param name="clonedName">name of the clone</param>
            <returns>reference to the newly cloned stream</returns>
        </member>
        <member name="P:ViDi2.Training.IStream.Tools">
            <summary>
            Gets the list of tools (only root children) of this stream
            </summary>
        </member>
        <member name="P:ViDi2.Training.IStream.Database">
            <summary>
            Gets the stream's database 
            </summary>
        </member>
        <member name="E:ViDi2.Training.IStream.Modified">
            <summary>
            Occurs when the stream was modified
            </summary>
        </member>
        <member name="T:ViDi2.Training.StreamModifiedEventHandler">
            <summary>
            Handler called when the stream was modified
            </summary>
            <param name="stream">the stream that was modified</param>
        </member>
        <member name="T:ViDi2.Training.IToolList">
            <summary>
            Represents a list of tools
            </summary>
        </member>
        <member name="M:ViDi2.Training.IToolList.Add(System.String,ViDi2.ToolType)">
            <summary>
            Adds a new tool
            </summary>
            <param name="name">name of the tool</param>
            <param name="type">type of the tool</param>
            <returns>a reference to the newly created tool</returns>
        </member>
        <member name="M:ViDi2.Training.IToolList.Remove(System.String)">
            <summary>
            Removes a tool
            </summary>
            <param name="name">name of the tool</param>
        </member>
        <member name="M:ViDi2.Training.IToolList.Invalidate">
            <summary>
            Invalidates a tool list
            </summary>
        </member>
        <member name="T:ViDi2.Training.TrainingFlagMode">
            <summary>
            mode of setting the train flag to an image
            </summary>
        </member>
        <member name="F:ViDi2.Training.TrainingFlagMode.Auto">
            <summary>
            randomly done when training the tool
            </summary>
        </member>
        <member name="F:ViDi2.Training.TrainingFlagMode.Always">
            <summary>
            always use this view for training
            </summary>
        </member>
        <member name="F:ViDi2.Training.TrainingFlagMode.Never">
            <summary>
            never used this view for training
            </summary>
        </member>
        <member name="T:ViDi2.Training.ITaskStatus">
            <summary>
            Tool task status
            </summary>
        </member>
        <member name="P:ViDi2.Training.ITaskStatus.IsBusy">
            <summary>
            Returns whether the task is busy
            </summary>
        </member>
        <member name="P:ViDi2.Training.ITaskStatus.IsCanceled">
            <summary>
            Returns whether the task was previously canceled
            </summary>
        </member>
        <member name="T:ViDi2.Training.ToolTask">
            <summary>
            Tool task identifiers
            </summary>
        </member>
        <member name="F:ViDi2.Training.ToolTask.Training">
            <summary>
            training
            </summary>
        </member>
        <member name="F:ViDi2.Training.ToolTask.Processing">
            <summary>
            processing
            </summary>
        </member>
        <member name="F:ViDi2.Training.ToolTask.Adaptation">
            <summary>
            adaptation
            </summary>
        </member>
        <member name="F:ViDi2.Training.ToolTask.CalcMaxBuffSize">
            <summary>
            calculate max buffer size
            </summary>
        </member>
        <member name="F:ViDi2.Training.ToolTask.LabelCheck">
            <summary>
            label check
            </summary>
        </member>
        <member name="F:ViDi2.Training.ToolTask.None">
            <summary>
            not in any status
            </summary>
        </member>
        <member name="T:ViDi2.Training.IStatus">
            <summary>
            Represents the tool's status
            </summary>
        </member>
        <member name="P:ViDi2.Training.IStatus.IsReady">
            <summary>
            Returns whether the tool is trained and can process images
            </summary>
        </member>
        <member name="P:ViDi2.Training.IStatus.IsBusy">
            <summary>
            Returns whether the tool is busy
            </summary>
        </member>
        <member name="P:ViDi2.Training.IStatus.LabelCheck">
            <summary>
            Returns the status of task to check label
            </summary>
        </member>
        <member name="P:ViDi2.Training.IStatus.CalcMaxBuffSize">
            <summary>
            Returns the status of task to calculate max buffer size 
            </summary>
        </member>
        <member name="P:ViDi2.Training.IStatus.Processing">
            <summary>
            Returns the processing task status
            </summary>
        </member>
        <member name="P:ViDi2.Training.IStatus.Training">
            <summary>
            Returns the training task status
            </summary>
        </member>
        <member name="P:ViDi2.Training.IStatus.NeedsTraining">
            <summary>
            Returns whether changes to the tool and/or its
            database would require a training:
            </summary>
        </member>
        <member name="P:ViDi2.Training.IStatus.KeepTrainedData">
            <summary>
            Returns whether HDM model needs to be saved when canceling training.
            Do not set the value. it is only for internal use.
            </summary>
        </member>
        <member name="P:ViDi2.Training.IStatus.LastErrorMessage">
            <summary>
            Gets the message describing the error (if any) that occured during a background operation
            </summary>
        </member>
        <member name="P:ViDi2.Training.IStatus.IsLoaded">
            <summary>
            true if the tool is loaded
            </summary>
        </member>
        <member name="P:ViDi2.Training.IStatus.IsLegacySuaModel">
            <summary>
            true if the tool is not made with VPDL 3.0 or upper
            </summary>
        </member>
        <member name="T:ViDi2.Training.IProgress">
            <summary>
            Represents the progress on a background operation
            </summary>
        </member>
        <member name="P:ViDi2.Training.IProgress.Value">
            <summary>
            Gets the current progress as a number between 0.0 and 1.0
            </summary>
        </member>
        <member name="P:ViDi2.Training.IProgress.Description">
            <summary>
            Gets a description of the background operation
            </summary>
        </member>
        <member name="P:ViDi2.Training.IProgress.ETA">
            <summary>
            Gets the etimated time of arrival
            </summary>
        </member>
        <member name="P:ViDi2.Training.IProgress.FuzzyETA">
            <summary>
            A prettified ETA string useful for display the ETA in a UI
            </summary>
        </member>
        <member name="P:ViDi2.Training.IProgress.ElapsedTime">
            <summary>
            Gets a Elapsed time (second)
            </summary>
        </member>
        <member name="P:ViDi2.Training.IProgress.MinLoss">
            <summary>
            Gets a min loss
            </summary>
        </member>
        <member name="P:ViDi2.Training.IProgress.MinEpoch">
            <summary>
            Gets a min epoch
            </summary>
        </member>
        <member name="P:ViDi2.Training.IProgress.CurrentLoss">
            <summary>
            Gets a current loss
            </summary>
        </member>
        <member name="P:ViDi2.Training.IProgress.CurrentEpoch">
            <summary>
            Gets a current epoch
            </summary>
        </member>
        <member name="T:ViDi2.Training.ITargetCompatibility">
            <summary>
            Represents whether a tool is compatible with a deployment target
            </summary>
        </member>
        <member name="P:ViDi2.Training.ITargetCompatibility.Compatible">
            <summary>
            True if the tool parameters are compatible with this deployment target
            </summary>
        </member>
        <member name="P:ViDi2.Training.ITargetCompatibility.Errors">
            <summary>
            If the tool is not Compatible, a list of error messages specifying why
            </summary>
        </member>
        <member name="T:ViDi2.Training.ITool">
            <summary>
            Represents the base of all training tools
            </summary>
        </member>
        <member name="P:ViDi2.Training.ITool.Name">
            <summary>
            Gets or sets the tool name
            </summary>
        </member>
        <member name="P:ViDi2.Training.ITool.ObjectID">
            <summary>
            Gets or sets the tool's Object ID
            </summary>
        </member>
        <member name="P:ViDi2.Training.ITool.Stream">
            <summary>
            Gets the tool's parent stream
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:ViDi2.Training.ITool.Type" -->
        <member name="P:ViDi2.Training.ITool.Parent">
            <summary>
            Gets the tool's parent tool or null if there is none
            </summary>
        </member>
        <member name="P:ViDi2.Training.ITool.Children">
            <summary>
            Gets the list of direct child tools
            </summary>
        </member>
        <member name="M:ViDi2.Training.ITool.Clone(System.String)">
            <summary>
            Clones the tool
            </summary>
            <param name="cloneName">the name of the clone</param>
            <returns></returns>
        </member>
        <member name="M:ViDi2.Training.ITool.Move(ViDi2.Training.ITool)">
            <summary>
            Moves the tool to become a child of a new parent
            </summary>
            <param name="newParent">the new parent tool</param>
        </member>
        <member name="P:ViDi2.Training.ITool.Mask">
            <summary>
            Gets or sets the tool mask
            </summary>
        </member>
        <member name="P:ViDi2.Training.ITool.Parameters">
            <summary>
            Gets the tool parameters
            </summary>
        </member>
        <member name="P:ViDi2.Training.ITool.Database">
            <summary>
            Gets the tool database
            </summary>
        </member>
        <member name="M:ViDi2.Training.ITool.RenameClass(System.String,System.String)">
            <summary>
            Renames a tool's class, i.e. region, feature or tag
            </summary>
            <param name="name">current class name</param>
            <param name="newName">new class name</param>
        </member>
        <member name="M:ViDi2.Training.ITool.RemoveClass(System.String)">
            <summary>
            Removes a tool's class, i.e. region, feature or tag
            </summary>
            <param name="name">class name</param>
        </member>
        <member name="M:ViDi2.Training.ITool.SetClassColor(System.String,System.String)">
            <summary>
            Sets a tool's class color, i.e. for regions or tags (not supported for features)
            </summary>
            <param name="name"></param>
            <param name="color"></param>
        </member>
        <member name="P:ViDi2.Training.ITool.Progress">
            <summary>
            Gets the progress on the current background task
            </summary>
        </member>
        <member name="P:ViDi2.Training.ITool.Status">
            <summary>
            Gets the tool status
            </summary>
        </member>
        <member name="P:ViDi2.Training.ITool.TrainingProgressReporter">
            <summary>
            Optionally reports progress as the tool is trained.
            </summary>
        </member>
        <member name="M:ViDi2.Training.ITool.Interrupt">
            <summary>
            Interrupts the current background task
            </summary>
        </member>
        <member name="M:ViDi2.Training.ITool.Reset">
            <summary>
            Resets the tool
            </summary>
        </member>
        <member name="P:ViDi2.Training.ITool.TargetCompatibility">
            <summary>
            Tool compatibility info for various deployment targets
            </summary>
        </member>
        <member name="M:ViDi2.Training.ITool.MakeTargetCompatible(ViDi2.DeploymentTarget)">
            <summary>
            Changes tool parameters as needed to make it compatible with a deployment target.
            May reset the tool.
            </summary>
        </member>
        <member name="M:ViDi2.Training.ITool.Train(System.Collections.Generic.List{System.Int32})">
            <summary>
            Starts training the tool in the background
            </summary>
            <param name="devices">a list of devices to choose from</param>
        </member>
        <member name="M:ViDi2.Training.ITool.Wait">
            <summary>
            Blocks until the current background task is done
            </summary>
        </member>
        <member name="M:ViDi2.Training.ITool.Wait(ViDi2.Training.ToolTask)">
            <summary>
            Blocks until the specific background task is done
            </summary>
        </member>
        <member name="M:ViDi2.Training.ITool.Wait(System.UInt32)">
            <summary>
            Blocks until the current background task is done or the given time interval has passed
            </summary>
            <param name="timeout">timeout in milliseconds</param>
            <returns>true if the task is done, false on timeout</returns>
        </member>
        <member name="M:ViDi2.Training.ITool.Wait(ViDi2.Training.ToolTask,System.UInt32)">
            <summary>
            Blocks until the specific background task is done or the given time interval has passed
            </summary>
            <param name="timeout">timeout in milliseconds</param>
            <returns>true if the task is done, false on timeout</returns>
        </member>
        <member name="P:ViDi2.Training.ITool.RegionOfInterest">
            <summary>
            Gets the tool region of interest
            </summary>
        </member>
        <member name="M:ViDi2.Training.ITool.Export">
            <summary>
            Exports the tool to a stream
            </summary>
            <returns>stream with the tool data</returns>
        </member>
        <member name="M:ViDi2.Training.ITool.ValidateTool(System.IO.Stream)">
            <summary>
            Validate tags from a stream (Only Green HDM)
            </summary>
            <param name="stream">stream containing the tool data</param>
            <returns>true if tags are valid</returns>
        </member>
        <member name="M:ViDi2.Training.ITool.Import(System.IO.Stream)">
            <summary>
            Imports a tool from a stream
            </summary>
            <param name="stream">stream containing the tool data</param>
        </member>
        <member name="M:ViDi2.Training.ITool.Adapt(System.Collections.Generic.List{System.Int32})">
            <summary>
            Apply adaptation mode to a pre-trained model
            </summary>
            <param name="devices">a list of devices to choose from</param>
        </member>
        <member name="M:ViDi2.Training.ITool.LabelChecker(System.Collections.Generic.List{System.Int32})">
            <summary>
            Check label quality 
            </summary>
            <param name="devices">a list of devices to choose from</param>
        </member>
        <member name="M:ViDi2.Training.ITool.ExportTrainingArtifact">
            <summary>
            Export the training artifact of the tool
            </summary>
            <returns>stream containing the training artifact</returns>
        </member>
        <member name="M:ViDi2.Training.ITool.ImportTrainingArtifact(System.IO.Stream)">
            <summary>
            Import a training artifact from a stream
            </summary>
            <param name="stream">stream containing the training artifact</param>
        </member>
        <member name="E:ViDi2.Training.ITool.Modified">
            <summary>
            Occurs when the tool was modified
            </summary>
        </member>
        <member name="E:ViDi2.Training.ITool.Closing">
            <summary>
            Occurs before a tool is closed (removed or unloaded)
            </summary>
        </member>
        <member name="P:ViDi2.Training.ITool.RecentFilters">
            <summary>
            Contains the most recently used view filters for this tool
            </summary>
        </member>
        <member name="P:ViDi2.Training.ITool.UpdateAvailable">
            <summary>
            returns true if the parameters of the tool are not up to date
            </summary>
        </member>
        <member name="M:ViDi2.Training.ITool.Update">
            <summary>
            Update the tools parameter with the default values of the current version.
            </summary>
        </member>
        <member name="M:ViDi2.Training.ITool.GetLossGraphData(System.Boolean)">
            <summary>
            Get loss graph data for HDM(Red, Green)
            </summary>
            <param name="isRealTime">Condition for realtime</param>
        </member>
        <member name="M:ViDi2.Training.ITool.RestoreLossGraphData">
            <summary>
            Restore backed up loss graph data
            </summary>
        </member>
        <member name="M:ViDi2.Training.ITool.ClearBackupLossGraphData">
            <summary>
            Clear backed up loss graph data
            </summary>
        </member>
        <member name="M:ViDi2.Training.ITool.SignalModified(System.Boolean)">
            <summary>
            Reflect the tool state
            </summary>
            <param name="reset">Use after resetting the tool</param>
        </member>
        <member name="P:ViDi2.Training.ITool.IsAdaptTagMatching">
            <summary>
            AdaptationMode Tag Check
            </summary>
        </member>
        <member name="P:ViDi2.Training.ITool.IsAdaptMinCheck">
            <summary>
            AdaptationMode MinCount Check
            </summary>
        </member>
        <member name="T:ViDi2.Training.ToolModifiedEventHandler">
            <summary>
            Handler called when the tool was modified
            </summary>
            <param name="tool"></param>
        </member>
        <member name="T:ViDi2.Training.ClosingEventArgs">
            <summary>
            Represents the event arguments for the Tool's Closing event
            </summary>
        </member>
        <member name="P:ViDi2.Training.ClosingEventArgs.Cancel">
            <summary>
            Gets or sets whether the closing is canceled
            </summary>
        </member>
        <member name="T:ViDi2.Training.ToolClosingEventHandler">
            <summary>
            Handler called before the tool is closed (removed or unloaded)
            </summary>
            <param name="tool"></param>
        </member>
        <member name="T:ViDi2.Training.IBlueTool">
            <summary>
            Represents the ViDi blue tool
            </summary>
        </member>
        <member name="P:ViDi2.Training.IBlueTool.Parameters">
            <summary>
            Gets the tool parameters
            </summary>
        </member>
        <member name="P:ViDi2.Training.IBlueTool.Database">
            <summary>
            Gets the tool database
            </summary>
        </member>
        <member name="T:ViDi2.Training.IRedTool">
            <summary>
            Represents the ViDi red tool
            </summary>
        </member>
        <member name="P:ViDi2.Training.IRedTool.Parameters">
            <summary>
            Gets the tool parameters
            </summary>
        </member>
        <member name="P:ViDi2.Training.IRedTool.Database">
            <summary>
            Gets the tool database
            </summary>
        </member>
        <member name="P:ViDi2.Training.IRedTool.StatsSelected">
            <summary>
            Gets or sets database overview's selected type of count view
            </summary>
        </member>
        <member name="T:ViDi2.Training.IGreenTool">
            <summary>
            Represents the ViDi green tool
            </summary>
        </member>
        <member name="P:ViDi2.Training.IGreenTool.Parameters">
            <summary>
            Gets the tool parameters
            </summary>
        </member>
        <member name="P:ViDi2.Training.IGreenTool.Database">
            <summary>
            Gets the tool database
            </summary>
        </member>
        <member name="M:ViDi2.Training.IGreenTool.CalculateMaxBuffSize">
            <summary>
            Calculate the max buffer size of network
            </summary>
            <returns></returns>
        </member>
        <member name="T:ViDi2.Training.ILossGraphData">
            <summary>
            Represents the loss graph's data
            </summary>
        </member>
        <member name="P:ViDi2.Training.ILossGraphData.Index">
            <summary>
            Gets a unique index (primary key)
            </summary>
        </member>
        <member name="P:ViDi2.Training.ILossGraphData.ElapsedTime">
            <summary>
            Gets a Elapsed time (second)
            </summary>
        </member>
        <member name="P:ViDi2.Training.ILossGraphData.MinLoss">
            <summary>
            Gets a min loss
            </summary>
        </member>
        <member name="P:ViDi2.Training.ILossGraphData.MinEpoch">
            <summary>
            Gets a min epoch
            </summary>
        </member>
        <member name="P:ViDi2.Training.ILossGraphData.CurrentLoss">
            <summary>
            Gets a current loss
            </summary>
        </member>
        <member name="P:ViDi2.Training.ILossGraphData.CurrentEpoch">
            <summary>
            Gets a current epoch
            </summary>
        </member>
        <member name="P:ViDi2.Training.IGreenDatabaseParameters.Exclusive">
            <summary>
            Gets whether the green tool operates in exclusive mode
            </summary>
        </member>
        <member name="P:ViDi2.Training.IGreenDatabaseParameters.LabeledClass">
            <summary>
            Gets the list of labeled class
            </summary>
        </member>
        <member name="T:ViDi2.Training.IToolParameters">
            <summary>
            Represents the parameters common to all tools
            </summary>
        </member>
        <member name="P:ViDi2.Training.IToolParameters.ColorChannels">
            <summary>
            Gets or sets the number of color channels
            </summary>
        </member>
        <member name="P:ViDi2.Training.IToolParameters.BorderType">
            <summary>
            Gets or sets the border-type when sampling outside image bounderies
            </summary>
        </member>
        <member name="P:ViDi2.Training.IToolParameters.MaskingMode">
            <summary>
            Gets or sets the masking mode when sampling within the masked region
            </summary>
        </member>
        <member name="P:ViDi2.Training.IToolParameters.Incremental">
            <summary>
            Gets or sets the usage of incremental learning 
            </summary>
        </member>
        <member name="P:ViDi2.Training.IToolParameters.PreTrainedModelName">
            <summary>
            Gets or sets the pre-trained model of incremental learning
            </summary>
        </member>
        <member name="P:ViDi2.Training.IToolParameters.CountEpochs">
            <summary>
            Gets or sets the number of epochs to train
            </summary>
        </member>
        <member name="P:ViDi2.Training.IToolParameters.Rotation">
            <summary>
            Gets or sets a list of rotation intervals (in degrees) used during sample perturbation
            </summary>
        </member>
        <member name="P:ViDi2.Training.IToolParameters.Scale">
            <summary>
            Gets or sets the perentage of random scaling used during sample perturbation
            </summary>
        </member>
        <member name="P:ViDi2.Training.IToolParameters.AspectRatio">
            <summary>
            Gets or sets the perentage of random aspect-ratio used during sample perturbation
            </summary>
        </member>
        <member name="P:ViDi2.Training.IToolParameters.Shear">
            <summary>
            Gets or sets the perentage of random shearing used during sample perturbation
            </summary>
        </member>
        <member name="P:ViDi2.Training.IToolParameters.Flip">
            <summary>
            Gets or sets the flipping mode used during sample perturbation
            </summary>
        </member>
        <member name="P:ViDi2.Training.IToolParameters.Luminance">
            <summary>
            Gets or sets the perentage of random luminance variation used during sample perturbation
            </summary>
        </member>
        <member name="P:ViDi2.Training.IToolParameters.Contrast">
            <summary>
            Gets or sets the perentage of random contrast variation used during sample perturbation
            </summary>
        </member>
        <member name="P:ViDi2.Training.IToolParameters.InvertContrast">
            <summary>
            Gets or sets whether the contrast is randomly inverted during sampling
            </summary>
        </member>
        <member name="P:ViDi2.Training.IToolParameters.GenerateLowPrecisionModel">
            <summary>
            Gets or sets whether a low-precision model is generated on training completion
            </summary>
        </member>
        <member name="P:ViDi2.Training.IToolParameters.NetworkModel">
            <summary>
            Get or sets the network model (must be one of AvailableNetworkModels)
            </summary>
        </member>
        <member name="P:ViDi2.Training.IToolParameters.AvailableNetworkModels">
            <summary>
            Get the list of available network models
            </summary>
        </member>
        <member name="M:ViDi2.Training.IToolParameters.DeferChangedSignal">
            <summary>
            Enters a defer cycle to merge changes in a single signal
            </summary>
            <returns>an IDisposable to trigger the signal</returns>
        </member>
        <member name="P:ViDi2.Training.IToolParameters.UpdateAsync">
            <summary>
            some parameters change needs to update the
            current state of the database labels.
            When this is set to true, the update of the
            current views is done asynchronously when changing the parameters
            </summary>
        </member>
        <member name="P:ViDi2.Training.IToolParameters.UpdateCurrentView">
            <summary>
            some parameters change needs to update the
            current state of the database labels.
            if this parameter is set to false, this will not be automatically called
            and it will be left to the user to call UpdateLabels
            </summary>
        </member>
        <member name="T:ViDi2.Training.IBlueToolParameters">
            <summary>
            Represents the tool-parameters for the blue tool
            </summary>
        </member>
        <member name="P:ViDi2.Training.IBlueToolParameters.OrientedFeatures">
            <summary>
            Gets or sets whether the features are oriented
            </summary>
        </member>
        <member name="P:ViDi2.Training.IBlueToolParameters.ScaledFeatures">
            <summary>
            Gets or sets whether the features are scaled
            </summary>
        </member>
        <member name="P:ViDi2.Training.IBlueToolParameters.NonUniformlyScaledFeatures">
            <summary>
            Gets or sets whether the features are scaled non-uniformly
            </summary>
        </member>
        <member name="P:ViDi2.Training.IBlueToolParameters.FeatureDetail">
            <summary>
            Gets or sets the feature granularity
            </summary>
        </member>
        <member name="P:ViDi2.Training.IBlueToolParameters.LegacyMode">
            <summary>
            Gets or sets whether the tool should use pre-3.4 behavior. If true, all features in a tool must share the same aspect ratio. 
            </summary>
        </member>
        <member name="T:ViDi2.Training.IRedToolParameters">
            <summary>
            Represents the parameters of the red tool
            </summary>
        </member>
        <member name="P:ViDi2.Training.IRedToolParameters.Mode">
            <summary>
            Gets or sets the red tool mode
            </summary>
        </member>
        <member name="P:ViDi2.Training.IRedToolParameters.Centered">
            <summary>
            Gets or sets whether the object in the image is centered and round and therefore
            can be virtually unrolled for learning and processing
            </summary>
        </member>
        <member name="P:ViDi2.Training.IRedToolParameters.Exclusive">
            <summary>
            Gets or sets whether the red tool operates in exclusive mode (supervised only)
            </summary>
        </member>
        <member name="P:ViDi2.Training.IRedToolParameters.Capacity">
            <summary>
            Gets or sets the red tool capacity (unsupervised only)
            </summary>
        </member>
        <member name="P:ViDi2.Training.IRedToolParameters.TrainingPasses">
            <summary>
            Gets or sets the number of training passes
            </summary>
        </member>
        <member name="P:ViDi2.Training.IRedToolParameters.UseBaseline">
            <summary>
            Gets or sets whether the tool uses a baseline
            </summary>
        </member>
        <member name="P:ViDi2.Training.IRedToolParameters.RegionColors">
            <summary>
            Gets or sets the colors associated to the regions
            </summary>
        </member>
        <member name="T:ViDi2.Training.IGreenToolParameters">
            <summary>
            Represents the parameters for the green tool
            </summary>
        </member>
        <member name="P:ViDi2.Training.IGreenToolParameters.TagColors">
            <summary>
            Gets or sets the colors associated to the tags
            </summary>
        </member>
        <member name="T:ViDi2.Training.IToolParametersHighDetail">
            <summary>
            The parameters for High Detail and High Detail Quick. For High Detail Quick, CountEpochs is the only available parameter.
            </summary>
        </member>
        <member name="P:ViDi2.Training.IToolParametersHighDetail.NetworkModel">
            <summary>
            Get or sets the network model (must be one of AvailableNetworkModels)
            </summary>
        </member>
        <member name="P:ViDi2.Training.IToolParametersHighDetail.AvailableNetworkModels">
            <summary>
            Get the list of available network models
            </summary>
        </member>
        <member name="P:ViDi2.Training.IToolParametersHighDetail.AdaptationMode">
            <summary>
            Get or sets the Adaptation Mode
            </summary>
        </member>
        <member name="P:ViDi2.Training.IToolParametersHighDetail.AvailableAdaptationModes">
            <summary>
            Get the list of available Adaptation Mode
            </summary>
        </member>
        <member name="P:ViDi2.Training.IToolParametersHighDetail.PreTrainedPath">
            <summary>
            Adaptation Trained Tool Path 
            </summary>
        </member>
        <member name="P:ViDi2.Training.IToolParametersHighDetail.CountEpochs">
            <summary>
            The number of epochs to train. For High Detail Quick, it is the only available training parameter.
            </summary>
        </member>
        <member name="P:ViDi2.Training.IToolParametersHighDetail.MinimumEpochs">
            <summary>
            The minimal number of epochs to train for
            </summary>
        </member>
        <member name="P:ViDi2.Training.IToolParametersHighDetail.Incremental">
            <summary>
            Gets or sets incremental learning mode
            </summary>
        </member>
        <member name="P:ViDi2.Training.IToolParametersHighDetail.SampleSelection">
            <summary>
            Gets or sets the channel format string
            </summary>
        </member>
        <member name="P:ViDi2.Training.IToolParametersHighDetail.PreTrainedModelName">
            <summary>
            Gets or sets the pre-trained model of incremental learning
            </summary>
        </member>
        <member name="P:ViDi2.Training.IToolParametersHighDetail.UpdateAsync">
            <summary>
            some parameters change needs to update the
            current state of the database labels.
            When this is set to true, the update of the
            current views is done asynchronously when changing the parameters
            </summary>
        </member>
        <member name="P:ViDi2.Training.IToolParametersHighDetail.UpdateCurrentView">
            <summary>
            some parameters change needs to update the
            current state of the database labels.
            if this parameter is set to false, this will not be automatically called
            and it will be left to the user to call UpdateLabels
            </summary>
        </member>
        <member name="T:ViDi2.Training.IGreenHighDetailParameters">
            <summary>
             training parameters for the green High-detail tool
            </summary>
        </member>
        <member name="P:ViDi2.Training.IGreenHighDetailParameters.MaxBufferSize">
            <summary>
            Maximal size of the views feed to the classifier.
            </summary>
        </member>
        <member name="P:ViDi2.Training.IGreenHighDetailParameters.ResizeSize">
            <summary>
            All view greater than Resize Size will be resized to fit into it
            while conserving their aspect ratio.
            </summary>
        </member>
        <member name="P:ViDi2.Training.IGreenHighDetailParameters.IsResizeManualMode">
            <summary>
            Whether its mode to feed maximal size of the views to classifier is manual or auto
            </summary>
        </member>
        <member name="T:ViDi2.Training.IRedHighDetailParameters">
            <summary>
            training parameters for the red High-detail tool
            </summary>
        </member>
        <member name="P:ViDi2.Training.IRedHighDetailParameters.PatchSize">
            <summary>
            Gets or sets the patch size, i.e. "128x128"
            </summary>
        </member>
        <member name="P:ViDi2.Training.IRedHighDetailParameters.NetworkType">
            <summary>
            Gets or sets the network type ("sensitive" / "contextual")
            </summary>
        </member>
        <member name="P:ViDi2.Training.IRedHighDetailParameters.Threshold">
            <summary>
            Gets or sets the upper and lower threshold
            </summary>
        </member>
        <member name="P:ViDi2.Training.IRedHighDetailParameters.SimpleRegions">
            <summary>
            Gets or sets whether extracted regions are simple, i.e. do not contain any holes
            </summary>
        </member>
        <member name="P:ViDi2.Training.IRedHighDetailParameters.RegionFilter">
            <summary>
            Gets or sets the region filter
            </summary>
        </member>
        <member name="P:ViDi2.Training.IRedHighDetailParameters.OptimizedBatchSizeOn">
            <summary>
            Gets or sets the optimized batch size
            </summary>
        </member>
        <member name="P:ViDi2.Training.IRedHighDetailParameters.RegionSmoothing">
            <summary>
            Gets or sets the region smoothing
            </summary>
        </member>
        <member name="P:ViDi2.Training.IRedHighDetailParameters.MaxDownSamplingSize">
            <summary>
            Gets or sets the max down sampling size
            </summary>
        </member>
        <member name="P:ViDi2.Training.IRedHighDetailParameters.AutoThresholdMode">
            <summary>
            Gets or sets the auto threshold mode
            </summary>
        </member>
        <member name="P:ViDi2.Training.IRedHighDetailParameters.AutoThresholdOn">
            <summary>
            Gets or sets the Auto threshold on
            </summary>
        </member>
        <member name="P:ViDi2.Training.IRedHighDetailParameters.UsePatchcropPrediction">
            <summary>
            Gets or sets the Auto threshold on
            </summary>
        </member>
        <member name="T:ViDi2.Training.IControl">
            <summary>
            Represents the base of the training interface
            </summary>
        </member>
        <member name="P:ViDi2.Training.IControl.Workspaces">
            <summary>
            Gets the list of workspaces
            </summary>
        </member>
        <member name="T:ViDi2.Training.IWorkspace">
            <summary>
            Represents a training workspace
            </summary>
        </member>
        <member name="P:ViDi2.Training.IWorkspace.Control">
            <summary>
            Gets the parent control
            </summary>
        </member>
        <member name="P:ViDi2.Training.IWorkspace.Parameters">
            <summary>
            Gets the parameters of the workspce
            </summary>
        </member>
        <member name="P:ViDi2.Training.IWorkspace.Size">
            <summary>
            Gets the size of the workspace on disk in bytes
            </summary>
        </member>
        <member name="M:ViDi2.Training.IWorkspace.Open(System.Boolean)">
            <summary>
            Opens the workspace
            </summary>
            <param name="recoverFromAutoSave">whether to recover from auto-save</param>
            <returns>reference to the opened workspace</returns>
        </member>
        <member name="M:ViDi2.Training.IWorkspace.Close(System.Boolean,System.Boolean)">
            <summary>
            Closes the workspace
            </summary>
            <param name="discardAutoSave">remove any auto-save data before closing</param>
            <param name="force">forces the closing of the tools even if they are busy</param>
        </member>
        <member name="M:ViDi2.Training.IWorkspace.Save(System.Boolean)">
            <summary>
            Saves the workspace
            </summary>
            <param name="autoSave">if true, performs an auto-save</param>
        </member>
        <member name="M:ViDi2.Training.IWorkspace.Clone(System.String)">
            <summary>
            Clones this workspace
            </summary>
            <param name="newName">name of the clone</param>
        </member>
        <member name="P:ViDi2.Training.IWorkspace.Streams">
            <summary>
            Gets the list of streams
            </summary>
        </member>
        <member name="P:ViDi2.Training.IWorkspace.IsReady">
            <summary>
            Returns true of all the streams are ready, i.e. trained
            </summary>
        </member>
        <member name="P:ViDi2.Training.IWorkspace.IsBusy">
            <summary>
            Returns true if any of the streams are busy, i.e. training or processing
            </summary>
        </member>
        <member name="M:ViDi2.Training.IWorkspace.Export(System.Boolean)">
            <summary>
            Exports the workspace to a IO stream
            </summary>
            <param name="withImages">if true, include the database images </param>
            <returns>stream with the workspace data</returns>
        </member>
        <member name="M:ViDi2.Training.IWorkspace.ExportRuntimeWorkspaceToFile(System.String)">
            <summary>
            Exports a runtime-workspace to a file(.vrws) at AppData directory
            </summary>
            <param name="exportWorkspaceName">the filename to be saved</param>
        </member>
        <member name="M:ViDi2.Training.IWorkspace.ExportRuntimeWorkspace">
            <summary>
            Exports a runtime-workspace to an IO stream
            </summary>
            <returns>stream with the runtime-workspace data</returns>
        </member>
        <member name="P:ViDi2.Training.IWorkspace.Version">
            <summary>
            Gets the workspace version 
            </summary>
        </member>
        <member name="P:ViDi2.Training.IWorkspace.IsModified">
            <summary>
            Gets a value indicating whether the workspace was modified and would need saving
            </summary>
        </member>
        <member name="P:ViDi2.Training.IWorkspace.IsModifiedSinceAutoSave">
            <summary>
            Gets a value indicating whether the workspace was modified since it was auto-saved
            </summary>
        </member>
        <member name="P:ViDi2.Training.IWorkspace.HasAutoSave">
            <summary>
            Gets a value indicating whether the workspace has been auto-saved
            </summary>
        </member>
        <member name="E:ViDi2.Training.IWorkspace.Modified">
            <summary>
            Occurs when the workspace was modified
            </summary>
        </member>
        <member name="M:ViDi2.Training.IWorkspace.TryLock">
            <summary>
            locks the workspace for the client
            </summary>
            <returns>true if the lock succeeded</returns>
        </member>
        <member name="M:ViDi2.Training.IWorkspace.Unlock">
            <summary>
            unlocks the workspace for the client. This never throws even if it did not succeed
            <returns>true if the unlock succeeded</returns>
            </summary>
        </member>
        <member name="M:ViDi2.Training.IWorkspace.MakeTargetCompatible(ViDi2.DeploymentTarget)">
            <summary>
            Makes the parameters of all tools in the workspace compatible with the given deployment target
            </summary>
            <param name="target"></param>
        </member>
        <member name="M:ViDi2.Training.IWorkspace.IsCompatibleWithDeploymentTarget(ViDi2.DeploymentTarget)">
            <summary>
            Checks whether all parameters of all tools in the workspace are compatible with the given deployment target
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:ViDi2.Training.IWorkspace.AreAllImagesCompatibleWithDeploymentTarget(ViDi2.DeploymentTarget)">
            <summary>
            Checks whether all images in all streams in the workspace are compatible with the given deployment target
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="P:ViDi2.Training.IWorkspace.IsLocked">
            <summary>
            true when the workspace is locked by another client. False otherwise : the workspace is not locked
            or the current client holds the lock
            </summary>
        </member>
        <member name="P:ViDi2.Training.IWorkspace.IsSharedWithCurrentUser">
            <summary>
            True when the workspace was created by another user and shared with the current user.
            False when the workspace was created by the current user (e.g. <see cref="P:ViDi2.Training.IWorkspace.OwnersEmailAddress"/>
            is the current user's email address).
            Null when user logins and/or workspace sharing are not supported.
            </summary>
        </member>
        <member name="P:ViDi2.Training.IWorkspace.OwnersEmailAddress">
            <summary>
            The email address of the user that created this workspace.
            Null when user logins and/or workspace sharing are not supported,
            or when the owner's email address is not known.
            </summary>
        </member>
        <member name="P:ViDi2.Training.IWorkspace.IsEasyUI">
            <summary>
            Determine if it was made by Easy UI
            </summary>
        </member>
        <member name="T:ViDi2.Training.WorkspaceModifiedEventHandler">
            <summary>
            Handler called when the workspace was modified
            </summary>
            <param name="workspace">the workspace that was modified</param>
        </member>
        <member name="T:ViDi2.Training.IWorkspaceList">
            <summary>
            Represents a list of available training workspaces
            </summary>
        </member>
        <member name="M:ViDi2.Training.IWorkspaceList.Add(System.String)">
            <summary>
            Adds a new workspace
            </summary>
            <param name="name">name of the new workspace</param>
            <returns>reference to the new workspace</returns>
        </member>
        <member name="M:ViDi2.Training.IWorkspaceList.Add(System.String,System.IO.Stream)">
            <summary>
            Adds a new workspace from a stream
            </summary>
            <param name="name">name of the new workspace</param>
            <param name="stream">stream with the workspace data</param>
            <returns>reference to the new workspace</returns>
        </member>
        <member name="M:ViDi2.Training.IWorkspaceList.Remove(System.String)">
            <summary>
            Deltetes the workspace
            </summary>
            <param name="name">name of the workspace</param>
        </member>
        <member name="M:ViDi2.Training.IWorkspaceList.Refresh">
            <summary>
            Signals to consumers of this list that its contents, as well as the the properties of each workspace,
            such as <see cref="P:ViDi2.IWorkspace.DisplayName"/> or <see cref="P:ViDi2.IWorkspace.IsOpen"/>,
            should be updated.
            </summary>
        </member>
        <member name="P:ViDi2.Training.IWorkspaceList.SynchronizationContext">
            <summary>
            Context for updating the Workspace (for UI)
            </summary>
        </member>
        <member name="P:ViDi2.Training.IWorkspaceParameters.Description">
            <summary>
            Gets or sets the description of the runtime workspace
            </summary>
        </member>
        <member name="P:ViDi2.Training.IWorkspaceParameters.DeploymentTarget">
            <summary>
            Gets or sets the deployment target of the runtime workspace
            </summary>
        </member>
        <member name="T:ViDi2.Training.IWorkspaceVersion">
            <summary>
            Represents the version of a workspace
            </summary>
        </member>
        <member name="M:ViDi2.Training.IWorkspaceVersion.New">
            <summary>
            Saves a new version
            </summary>
        </member>
        <member name="M:ViDi2.Training.IWorkspaceVersion.Delete">
            <summary>
            Deletes the current version
            </summary>
        </member>
        <member name="M:ViDi2.Training.IWorkspaceVersion.DeleteLaterVersion(System.Int32)">
            <summary>
            Deletes a later version
            </summary>
        </member>
        <member name="P:ViDi2.Training.IWorkspaceVersion.Current">
            <summary>
            Gets or sets the current version
            </summary>
        </member>
        <member name="P:ViDi2.Training.IWorkspaceVersion.Available">
            <summary>
            Gets the available versions
            </summary>
        </member>
        <member name="E:ViDi2.Training.IWorkspaceVersion.Changed">
            <summary>
            Occurs when the current version changed
            </summary>
        </member>
        <member name="T:ViDi2.Training.WorkspaceVersionChangedHandler">
            <summary>
            Handler called when the current workspace version changed
            </summary>
            <param name="version">the new current version</param>
        </member>
        <member name="T:ViDi2.Training.ViewKey">
            <summary>
            Represents a key by which a view in the database is referenced
            </summary>
        </member>
        <member name="M:ViDi2.Training.ViewKey.#ctor(ViDi2.FrameKey,System.Int32)">
            <summary>
            Initializes a new instance of a ViewKey to the given sample name and view-index
            </summary>
            <param name="frameKey">the sample frame key</param>
            <param name="index">the view index</param>
        </member>
        <member name="M:ViDi2.Training.ViewKey.#ctor">
            <summary>
            Used for mocking
            </summary>
        </member>
        <member name="P:ViDi2.Training.ViewKey.Index">
            <summary>
            Gets the view-index of this ViewKey
            </summary>
        </member>
        <member name="F:ViDi2.Training.ViewKey.ViewSeparator">
            <summary>
            The character that's used to separate the FrameKey from the view index
            </summary>
        </member>
        <member name="M:ViDi2.Training.ViewKey.ToString">
            <summary>
            Returns a string representation of the ViewKey
            </summary>
            <returns>a string</returns>
        </member>
        <member name="M:ViDi2.Training.ViewKey.ToFilterString">
            <summary>
            Returns a filter string selecting this ViewKey
            </summary>
            <returns>a string</returns>
        </member>
        <member name="M:ViDi2.Training.ViewKey.Equals(ViDi2.Training.ViewKey)">
            <summary>
            Compares this view-key to a given one
            </summary>
            <param name="other">another view-key</param>
            <returns>true if the given view-key is identical to this one</returns>
        </member>
        <member name="M:ViDi2.FrameKey.#ctor">
            <summary>
            Used for mocking
            </summary>
        </member>
        <member name="P:ViDi2.FrameKey.FrameIndex">
            <summary>
            Gets the frame-index of this FrameKey
            </summary>
        </member>
        <member name="F:ViDi2.FrameKey.FrameSeparator">
            <summary>
            The character that's used to separate the sample name and frame index
            </summary>
        </member>
        <member name="M:ViDi2.FrameKey.ToString">
            <summary>
            Returns a string representation of the FrameKey
            </summary>
            <returns>a string</returns>
        </member>
        <member name="M:ViDi2.FrameKey.ToFilterString">
            <summary>
            Returns a filter string selecting this FrameKey
            </summary>
            <returns>a string</returns>
        </member>
        <member name="M:ViDi2.FrameKey.Equals(ViDi2.FrameKey)">
            <summary>
            Compares this view-key to a given one
            </summary>
            <param name="other">another view-key</param>
            <returns>true if the given view-key is identical to this one</returns>
        </member>
        <member name="M:ViDi2.FrameKey.op_Implicit(System.String)~ViDi2.FrameKey">
            <summary>
            Implicit string to FrameKey conversion
            </summary>
            <param name="sampleName"></param>
        </member>
        <member name="T:ViDi2.IComputeDevice">
            <summary>
            Represents a compute device
            </summary>
        </member>
        <member name="P:ViDi2.IComputeDevice.Index">
            <summary>
            Gets the device index
            </summary>
        </member>
        <member name="P:ViDi2.IComputeDevice.Name">
            <summary>
            Gets the name of the device
            <para/>(ex : Geforce GTX 1080 Ti)
            </summary>
        </member>
        <member name="P:ViDi2.IComputeDevice.Type">
            <summary>
            Gets the type of the device
            <para/>(ex : cuda)
            </summary>
        </member>
        <member name="P:ViDi2.IComputeDevice.Memory">
            <summary>
            Gets the device's memory size in bytes
            <para/>(ex : 11,811,160,064 / 1024 / 1024 == 11GB)
            </summary>
        </member>
        <member name="P:ViDi2.IComputeDevice.FreeMemory">
            <summary>
            Gets the device's availble memory size in bytes
            <para/>(ex : 11,811,160,064 / 1024 / 1024 == 11GB)
            </summary>
        </member>
        <member name="P:ViDi2.IComputeDevice.OptimizedGpuMemory">
            <summary>
            Gets the device's allocated optimized  memory size in bytes
            <para/>(ex : 11,811,160,064 / 1024 / 1024 == 11GB)
            </summary>
        </member>
        <member name="P:ViDi2.IComputeDevice.OptimizedGpuMemoryEnabled">
            <summary>
            Gets if the device is currently using optimized gpu memory
            </summary>
        </member>
        <member name="P:ViDi2.IComputeDevice.Version">
            <summary>
            Gets the device version
            <para/>(ex : 6.1)
            </summary>
        </member>
        <member name="P:ViDi2.IComputeDevice.SupportsLowPrecision">
            <summary>
            Gets whether the device supports low-precision mode
            </summary>
        </member>
        <member name="P:ViDi2.IComputeDevice.PerformanceState">
            <summary>
            Gets device's pState
            </summary>
        </member>
        <member name="T:ViDi2.IControl">
            @example Example.Runtime.Server
            @include ViDi.NET/Examples/Example.Runtime.Server/Program.cs
            @example Example.Runtime.Console
            @include ViDi.NET/Examples/Example.Runtime.Console/Program.cs
            @example Example.Runtime
            @include ViDi.NET/Examples/Example.Runtime/MainWindow.xaml.cs
            @example Example.ViDi.Suite.GUI
            @include ViDi.NET/Examples/Example.ViDi.Suite.GUI/MainWindow.xaml.cs
            @example Example.ViDi.Suite.Server
            @include ViDi.NET/Examples/Example.ViDi.Suite.Server/Program.cs
            <summary>
            Represents the base control
            </summary>
        </member>
        <member name="P:ViDi2.IControl.Workspaces">
            <summary>
            Gets the list of workspaces
            <para/> For using it with index, use method ElementAt.
            <para/> (ex : Workspaces["workspace"] or Workspaces.ElementAt(0)).
            </summary>
        </member>
        <member name="P:ViDi2.IControl.ComputeDevices">
            <summary>
            Returns a list of available GPU devices
            </summary>
            <returns></returns>
        </member>
        <member name="P:ViDi2.IControl.CLibraryVersion">
            <summary>
            Gets the version of the C library
            <para/> (ex : 2.1.1.26213).
            </summary>
        </member>
        <member name="P:ViDi2.IControl.DotNETWrapperVersion">
            <summary>
            Gets the version of the .NET wrapper
            <para/> (ex : 2.1.1.26213)
            </summary>
        </member>
        <member name="P:ViDi2.IControl.License">
            <summary>
            Gets the license object
            <para/> (ex : ViDi2.License)
            </summary>
        </member>
        <member name="P:ViDi2.IControl.LogMessages">
            <summary>
            Gets an XML document containing the log messages from the native library
            </summary>
        </member>
        <member name="P:ViDi2.IControl.LogDebugMessages">
            <summary>
            Gets an XML document containing the log messages from the native library (restricted access)
            </summary>
        </member>
        <member name="M:ViDi2.IControl.LogMessagesFromStream(System.IO.Stream)">
            <summary>
            Gets an XML document containing the log messages from a stream
            </summary>
        </member>
        <member name="M:ViDi2.IControl.InitializeComputeDevices(System.Enum,System.Collections.Generic.List{System.Int32})">
            <summary>
            Offers the possibility to initialize the compute devices when the control is created, without unloading the vidi dll
            example: mode =  "GpuMode.SingleDevicePerTool, GpuMode.MultipleDevicesPerTool(No longer supported)"
                     mode =  "GpuMode.NoSupport" will deinitilialize all cuda devices 
            This can only be called when all workspaces (runtime or training) are closed. 
            </summary>
        </member>
        <member name="M:ViDi2.IControl.StabilizeComputeDevices(System.Enum,System.String)">
            <summary>
            Offers the possibility to stabilize the compute devices when the control is created, without unloading the vidi dll
            example: mode =  "StabilizeMode.Default"
                     mode =  "StabilizeMode.Off"
                     mode =  "StabilizeMode.On"
                     mode =  "StabilizeMode.Extended"
                     mode =  "StabilizeMode.Arguments, (not supported yet)"
            This can only be called after compute devices initialized.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:ViDi2.IControl.OptimizedGPUMemory(System.UInt64)" -->
        <member name="P:ViDi2.IControl.LibraryAccess">
            <summary>
            Gets the control's underlying ILibraryAccess interface.
            </summary>
        </member>
        <member name="T:ViDi2.ImageChannelDepth">
            <summary>
            Represents the number of bits per color channel
            </summary>
        </member>
        <member name="F:ViDi2.ImageChannelDepth.Depth8">
            <summary>
            8 bit per channel
            </summary>
        </member>
        <member name="F:ViDi2.ImageChannelDepth.Depth16">
            <summary>
            16 bit per channel
            </summary>
        </member>
        <member name="F:ViDi2.ImageFormat.PNG">
            <summary>
            Portable Network Graphics
            </summary>
        </member>
        <member name="F:ViDi2.ImageFormat.BMP">
            <summary>
            Bitmap
            </summary>
        </member>
        <member name="F:ViDi2.ImageFormat.JPEG">
            <summary>
            Jpeg
            </summary>
        </member>
        <member name="F:ViDi2.ImageFormat.TIFF">
            <summary>
            Tiff
            </summary>
        </member>
        <member name="F:ViDi2.ImageFormat.NATIVE">
            <summary>
            Tiff
            </summary>
        </member>
        <member name="F:ViDi2.ImageFormat.RAW">
            <summary>
            ByteImage
            </summary>
        </member>
        <member name="T:ViDi2.ImageRGBOrder">
            <summary>
            If the object is WPFImage, it represents the 'RGB/BGR' order.
            Otherwise, it always return 'None'.
            </summary>
        </member>
        <member name="F:ViDi2.ImageRGBOrder.RGB">
            <summary>
            3Channel RGB
            </summary>
        </member>
        <member name="F:ViDi2.ImageRGBOrder.BGR">
            <summary>
            3Channel BGR
            </summary>
        </member>
        <member name="F:ViDi2.ImageRGBOrder.None">
            <summary>
            Not use RGB Order
            </summary>
        </member>
        <member name="T:ViDi2.IImage">
            <summary>
            Represents an image to send or retrieve from the library
            </summary>
        </member>
        <member name="P:ViDi2.IImage.Width">
            <summary>
            Gets the image width in pixel
            </summary>
        </member>
        <member name="P:ViDi2.IImage.Height">
            <summary>
            Gets the image height in pixel
            </summary>
        </member>
        <member name="P:ViDi2.IImage.Channels">
            <summary>
            Gets the number of color channels
            </summary>
        </member>
        <member name="P:ViDi2.IImage.ChannelDepth">
            <summary>
            Gets the bit depth of a channel
            </summary>
        </member>
        <member name="P:ViDi2.IImage.Bitmap">
            <summary>
            Retrieves a Bitmap of this image
            </summary>
        </member>
        <member name="P:ViDi2.IImage.RGBOrder">
            <summary>
            Gets the Order of color channels;
            </summary>
        </member>
        <member name="P:ViDi2.IImage.Lock">
            <summary>
            Returns a lock object in order to access the pixel data
            </summary>
            <remarks>
            This object, once retrieved, must be disposed in order to unlock the pixel data
            </remarks>
        </member>
        <member name="M:ViDi2.IImage.Save(System.IO.Stream,ViDi2.ImageFormat)">
            <summary>
            Saves the image to a stream
            </summary>
            <param name="stream">the target stream</param>
            <param name="imageFormat">the image format</param>
        </member>
        <member name="T:ViDi2.IImageLock">
            <summary>
            Represents an image lock which provides read-only access to the pixel data of an image
            </summary>
        </member>
        <member name="P:ViDi2.IImageLock.Step">
            <summary>
            Gets the image step, i.e. the number of bytes per scanline
            </summary>
        </member>
        <member name="P:ViDi2.IImageLock.PixelData">
            <summary>
            Gets a pointer to the pixel data
            </summary>
        </member>
        <member name="T:ViDi2.IPlanarImageLock">
             <summary>
            presents an image lock which provides read-only access to the pixel data of an planar image
             </summary>
        </member>
        <member name="P:ViDi2.IPlanarImageLock.PixelDatas">
            <summary>
            Gets List of pointers to the first pixels of each channels
            </summary>
        </member>
        <member name="P:ViDi2.IPlanarImageLock.Steps">
            <summary>
            Gets List of the steps of the different channels
            </summary>
        </member>
        <member name="T:ViDi2.IImageFactory">
            <summary>
            Represents a factor to create an image from a stream
            </summary>
        </member>
        <member name="M:ViDi2.IImageFactory.Load(System.IO.Stream,ViDi2.ImageFormat)">
            <summary>
            Load an image from stream
            </summary>
            <param name="stream">the stream holding the image data</param>
            <returns>the image</returns>
        </member>
        <member name="T:ViDi2.ILibraryAccess">
            @example Example.Runtime.Server
            @include ViDi.NET/Examples/Example.Runtime.Server/Program.cs
            @example Example.Runtime.Console
            @include ViDi.NET/Examples/Example.Runtime.Console/Program.cs
            @example Example.Runtime
            @include ViDi.NET/Examples/Example.Runtime/MainWindow.xaml.cs
            @example Example.ViDi.Suite.GUI
            @include ViDi.NET/Examples/Example.ViDi.Suite.GUI/MainWindow.xaml.cs
            @example Example.ViDi.Suite.Server
            @include ViDi.NET/Examples/Example.ViDi.Suite.Server/Program.cs
            <summary>
            Represents the base wrapper of the C-library
            </summary>
        </member>
        <member name="M:ViDi2.ILibraryAccess.GetWorkspaceDisplayName(ViDi2.WorkspaceName,ViDi2.ILibraryAccessContext)">
            <summary>
            Returns the human-readable display name describing the workspace.
            </summary>
            <remarks>
            Depending on the LibraryAccess implementation this may or may not differ from
            the WorkspaceName that should be passed to other LibraryAccess methods.
            
            In some environments (e.g. cloud), that WorkspaceName may be a unique ID that is meaningless
            to humans; whereas this method could return a name more suitable for display in a GUI, for example.
            </remarks>
            <param name="workspace"> The workspace whose display name should be retrieved.</param>
            <param name="context"></param>
            <returns> The human-readable display name describing the workspace. </returns>
        </member>
        <member name="T:ViDi2.ILibraryAccessContext">
            <summary>
            holds custom data passed to a library access method call
            </summary>
        </member>
        <member name="T:ViDi2.Limitation">
            <summary>
            Has information of the HdmQuiick and Lableling lincenses
            </summary>
        </member>
        <member name="T:ViDi2.LicenseType">
            <summary>
            Represents the license type
            </summary>
        </member>
        <member name="T:ViDi2.PerformanceLevel">
            <summary>
            Represents the the performance level
            </summary>
        </member>
        <member name="T:ViDi2.ILicense">
            <summary>
            Represents the ViDi license that is used by the library
            </summary>
        </member>
        <member name="P:ViDi2.ILicense.Expires">
            <summary>
            Gets the shortest expiration time
            </summary>
        </member>
        <member name="P:ViDi2.ILicense.Tools">
            <summary>
            Gets the available tool types with their expiration time
            </summary>
        </member>
        <member name="P:ViDi2.ILicense.Type">
            <summary>
            Gets the licence type
            </summary>
        </member>
        <member name="P:ViDi2.ILicense.PerformanceLevel">
            <summary>
            Gets the performance level
            </summary>
        </member>
        <member name="P:ViDi2.ILicense.AOD">
            <summary>
            Returns true if AOD succeeded
            </summary>
        </member>
        <member name="P:ViDi2.ILicense.PreviewChannel">
            <summary>
            Returns true if the preview license is available
            </summary>
        </member>
        <member name="P:ViDi2.ILicense.GPUOptimization">
            <summary>
            Gets the availibility of GPU speed optimization (optimized GPU memory, low-precision mode)
            </summary>
        </member>
        <member name="P:ViDi2.ILicense.MultiChannel">
            <summary>
            Returns true if the multi-channel license is available
            </summary>
        </member>
        <member name="P:ViDi2.ILicense.SerialNumber">
            <summary>
            Gets the serial number of the dongle
            <para/>(ex : 0-1234567)
            </summary>
        </member>
        <member name="M:ViDi2.ILicense.RequestUpdate">
            <summary>
            Requests a license update
            </summary>
            <returns>the license update request file</returns>
        </member>
        <member name="M:ViDi2.ILicense.ApplyUpdate(System.String)">
            <summary>
            Appplies a license update
            </summary>
            <param name="data">the license update file</param>
        </member>
        <member name="T:ViDi2.NamespaceDoc">
            <summary>
            The <see cref="N:ViDi2"/> namespace contains all classes 
            common to the Runtime and Training APIs
            </summary>
        </member>
        <member name="T:ViDi2.IImageInfo">
            <summary>
            Represents a structure holding information about an image
            </summary>
        </member>
        <member name="P:ViDi2.IImageInfo.Width">
            <summary>
            gets the image width in pixel
            </summary>
        </member>
        <member name="P:ViDi2.IImageInfo.Height">
            <summary>
            Gets the image height in pixel
            </summary>
        </member>
        <member name="P:ViDi2.IImageInfo.Channels">
            <summary>
            Gets the number of color channels
            </summary>
        </member>
        <member name="P:ViDi2.IImageInfo.BitsPerChannel">
            <summary>
            Gets the number of bits per channel
            </summary>
        </member>
        <member name="P:ViDi2.IImageInfo.Filename">
            <summary>
            Gets the image filename 
            </summary>
        </member>
        <member name="T:ViDi2.ISetInfo">
            <summary>
            Holds the name and color of a sample set
            </summary>
        </member>
        <member name="P:ViDi2.ISetInfo.Name">
            <summary>
            The name of the set
            </summary>
        </member>
        <member name="P:ViDi2.ISetInfo.Color">
            <summary>
            The color of the set 
            <para/>Returns a hex color code including # character (ex: #F15854)
            </summary>
        </member>
        <member name="T:ViDi2.IMarking">
            <summary>
            Represents the result of a tool processing an image
            </summary>
        </member>
        <member name="M:ViDi2.IMarking.Export">
            <summary>
            Exports all information contained in the marking as an XML element
            <para/>Please refer to "C document-resource" for the xml structure of marking.
            </summary>
        </member>
        <member name="P:ViDi2.IMarking.Duration">
            <summary>
            Gets the processing duration (including post-processing) in seconds
            </summary>
        </member>
        <member name="P:ViDi2.IMarking.DurationProcessOnly">
            <summary>
            Gets the processing duration (not including post-processing) in seconds
            </summary>
        </member>
        <member name="P:ViDi2.IMarking.DurationPostProcess">
            <summary>
            Gets the post-processing duration in seconds
            </summary>
        </member>
        <member name="P:ViDi2.IMarking.ImageInfo">
            <summary>
            Gets the size of the processed image in pixel
            </summary>
        </member>
        <member name="P:ViDi2.IMarking.ImageInfos">
            <summary>
            Gets the list of images for this marking
            </summary>
        </member>
        <member name="P:ViDi2.IMarking.Sets">
            <summary>
            Gets the sets this sample belongs to
            </summary>
        </member>
        <member name="P:ViDi2.IMarking.Processed">
            <summary>
            Gets the date when the marking was processed
            </summary>
        </member>
        <member name="P:ViDi2.IMarking.Added">
            <summary>
            Gets the date when the marking was added
            </summary>
        </member>
        <member name="P:ViDi2.IMarking.ToolName">
            <summary>
            Gets the name of the source tool
            </summary>
        </member>
        <member name="P:ViDi2.IMarking.ToolType">
            <summary>
            Gets the type of the source tool
            </summary>
        </member>
        <member name="M:ViDi2.IMarking.ViewImage(System.Int32)">
            <summary>
            Gets the image of the view
            </summary>
            <param name="viewIndex">view index</param>
            <returns></returns>
        </member>
        <member name="P:ViDi2.IMarking.Views">
            <summary>
            Gets the views of the marking
            </summary>
        </member>
        <member name="T:ViDi2.IBlueMarking">
            <summary>
            Represents a specializatin of the marking for the blue tool
            </summary>
        </member>
        <member name="P:ViDi2.IBlueMarking.Views">
            <summary>
            Gets the views of the marking
            </summary>
        </member>
        <member name="T:ViDi2.IRedMarking">
            <summary>
            Represents a specializatin of the marking for the red tool
            </summary>
        </member>
        <member name="P:ViDi2.IRedMarking.Views">
            <summary>
            Gets the views of the marking
            </summary>
        </member>
        <member name="T:ViDi2.IGreenMarking">
            <summary>
            Represents a specializatin of the marking for the green tool
            </summary>
        </member>
        <member name="P:ViDi2.IGreenMarking.Views">
            <summary>
            Gets the views of the marking
            </summary>
        </member>
        <member name="T:ViDi2.IMatch">
            <summary>
            Represents a match of a model on a set of features
            </summary>
        </member>
        <member name="P:ViDi2.IMatch.ModelName">
            <summary>
            Gets the name of the matched model
            </summary>
        </member>
        <member name="P:ViDi2.IMatch.Score">
            <summary>
            Gets the matching score
            <para />(Between 0 and 1)
            </summary>
        </member>
        <member name="P:ViDi2.IMatch.Covers">
            <summary>
            Gets the match covered by this match (labeled &lt;-&gt; unlabeled)
            <para/>(Used only in training workspace)
            </summary>
        </member>
        <member name="P:ViDi2.IMatch.IsSelected">
            <summary>
            Gets whether the match was selected by an axis-filter
            </summary>
        </member>
        <member name="P:ViDi2.IMatch.Features">
            <summary>
            Gets the list of features participating in the match
            <para />This includes the predicted model elements.
            </summary>
        </member>
        <member name="T:ViDi2.IReadModelMatch">
            <summary>
            A match for a model representing a string of characters
            </summary>
        </member>
        <member name="P:ViDi2.IReadModelMatch.FeatureString">
            <summary>
            Gets the string of feature IDs
            </summary>
        </member>
        <member name="P:ViDi2.IReadModelMatch.PrettifiedString">
            <summary>
            Gets the feature string with whitespace inserted
            </summary>
        </member>
        <member name="P:ViDi2.IReadModelMatch.Position">
            <summary>
            Gets the model position
            </summary>
        </member>
        <member name="T:ViDi2.INodeModelMatch">
            <summary>
            A match for a NodeModel
            </summary>
        </member>
        <member name="P:ViDi2.INodeModelMatch.NodePoints">
            <summary>
            Gets the list of node points 
            </summary>
        </member>
        <member name="P:ViDi2.INodeModelMatch.Pose">
            <summary>
            Gets the matrix describing the transformation from model to view coordinates
            </summary>
        </member>
        <member name="P:ViDi2.INodeModelMatch.Orientation">
            <summary>
            Gets the model orientation
            </summary>
        </member>
        <member name="P:ViDi2.INodeModelMatch.Scale">
            <summary>
            Gets the model scale
            </summary>
        </member>
        <member name="P:ViDi2.INodeModelMatch.AspectRatio">
            <summary>
            Gets the model aspect-ratio
            </summary>
        </member>
        <member name="P:ViDi2.INodeModelMatch.Shear">
            <summary>
            Gets the model skew
            </summary>
        </member>
        <member name="T:ViDi2.IStringModelMatch">
            <summary>
            A match for a StringModel
            </summary>
        </member>
        <member name="T:ViDi2.IRegexModelMatch">
            <summary>
            A match for a RegexModel
            </summary>
        </member>
        <member name="T:ViDi2.ILayoutModelMatchRegion">
            <summary>
            A region within the LayoutModelMatch
            </summary>
        </member>
        <member name="P:ViDi2.ILayoutModelMatchRegion.Name">
            <summary>
            Gets the region's name
            </summary>
        </member>
        <member name="P:ViDi2.ILayoutModelMatchRegion.Origin">
            <summary>
            Gets the region's Origin in View coordinates
            </summary>
        </member>
        <member name="P:ViDi2.ILayoutModelMatchRegion.Size">
            <summary>
            Gets the region's size
            </summary>
        </member>
        <member name="P:ViDi2.ILayoutModelMatchRegion.Features">
            <summary>
            Gets the list of features matched by this region
            </summary>
        </member>
        <member name="P:ViDi2.ILayoutModelMatchRegion.Occurrences">
            <summary>
            Gets the number of occurrences this region is looking for
            <para/> 0 : The model will be ignored when searching.
            <para/> -1 : Returns all occurrences.
            </summary>
        </member>
        <member name="T:ViDi2.ILayoutModelMatch">
            <summary>
            A match for a LayoutModel
            </summary>
        </member>
        <member name="P:ViDi2.ILayoutModelMatch.Regions">
            <summary>
            Get's the list of regions in the match
            </summary>
        </member>
        <member name="P:ViDi2.ILayoutModelMatch.AllRegionsPassed">
            <summary>
            Gets whether all regions in the model passed,
            <para/>where passing means that the number of features found in the region
            <para/>is equal to the expected number, Occurrences
            </summary>
        </member>
        <member name="T:ViDi2.IModel">
            <summary>
            Interface for Model
            </summary>
        </member>
        <member name="P:ViDi2.IModel.Name">
            <summary>
            Gets or sets the model name
            </summary>
        </member>
        <member name="M:ViDi2.IModel.Export">
            <summary>
            Exports the model to a stream as System.IO.Stream
            </summary>
            <returns></returns>
        </member>
        <member name="P:ViDi2.IModel.Threshold">
            <summary>
            Gets or sets the model threshold
            <para/>(Between 0 and 1)
            </summary>
        </member>
        <member name="P:ViDi2.IModel.Occurences">
            <summary>
            Gets or sets the number of occurrences of this model
            </summary>
        </member>
        <member name="P:ViDi2.IModel.Occurrences">
            <summary>
            Gets or sets the number of occurrences of this model
            <para/> 0 : The model will be ignored when searching.
            <para/> -1 : Returns all occurrences.
            </summary>
        </member>
        <member name="P:ViDi2.IModel.Type">
            <summary>
            Gets the type of model
            </summary>
        </member>
        <member name="P:ViDi2.IModel.IsEnabled">
            <summary>
            Gets or sets whether the model should be searched for
            </summary>
        </member>
        <member name="P:ViDi2.IModel.ViewFilter">
            <summary>
            Gets or sets the filter used to determine which views the model should be attempted to be matched on
            </summary>
        </member>
        <member name="T:ViDi2.IModelSearchSpace">
            <summary>
            Represents the search-space of a blue model
            </summary>
        </member>
        <member name="P:ViDi2.IModelSearchSpace.X">
            <summary>
            Gets or sets the horizontal position interval based on percentage(%)
            <para/>Default value is 100
            </summary>
        </member>
        <member name="P:ViDi2.IModelSearchSpace.ClampX">
            <summary>
            Gets or sets whether the horizontal position interval is mandatory
            </summary>
        </member>
        <member name="P:ViDi2.IModelSearchSpace.Y">
            <summary>
            Gets or sets the vertical position interval based on percentage(%)
            <para/>Default value is 100
            </summary>
        </member>
        <member name="P:ViDi2.IModelSearchSpace.ClampY">
            <summary>
            Gets or sets whether the vertical position interval is mandatory
            </summary>
        </member>
        <member name="P:ViDi2.IModelSearchSpace.Angle">
            <summary>
            Gets or sets the angle interval
            <para/>Returns radian value.
            <para/>Multiply by 180/PI to get degree value(º) like the below example
            <para/>
            <para/>[Example] 
            <para/>If Angle value = 1.57079632... 
            <para/>Angle * (180/Math.PI) => 90 (º)
            <para/></summary>
        </member>
        <member name="P:ViDi2.IModelSearchSpace.ClampAngle">
            <summary>
            Gets or sets whether the angle interval is mandatory
            </summary>
        </member>
        <member name="T:ViDi2.INodeModelSearchSpace">
            <summary>
            Represents the search-space of a blue node model
            </summary>
        </member>
        <member name="P:ViDi2.INodeModelSearchSpace.Scale">
            <summary>
            Gets or sets the scale interval
            <para/>default value is [0.5, 2]
            </summary>
        </member>
        <member name="P:ViDi2.INodeModelSearchSpace.ClampScale">
            <summary>
            Gets or sets whether the scale interval is mandatory
            </summary>
        </member>
        <member name="P:ViDi2.INodeModelSearchSpace.AspectRatio">
            <summary>
            Gets or sets the aspect-ratio interval
            <para/>Defualt value is [1, 1]
            </summary>
        </member>
        <member name="P:ViDi2.INodeModelSearchSpace.ClampAspectRatio">
            <summary>
            Gets or sets whether the aspect-ratio interval is mandatory
            </summary>
        </member>
        <member name="P:ViDi2.INodeModelSearchSpace.Shear">
            <summary>
            Gets or sets the shearing interval
            <para/>Default value is [0, 0]
            </summary>
        </member>
        <member name="P:ViDi2.INodeModelSearchSpace.ClampShear">
            <summary>
            Gets or sets whether the shearing interval is mandatory
            </summary>
        </member>
        <member name="P:ViDi2.INodeModel.SearchSpace">
            <summary>
            Gets the search space of the model.
            </summary>
        </member>
        <member name="P:ViDi2.INodeModel.Nodes">
            <summary>
            Gets the Node list of the model
            </summary>
        </member>
        <member name="P:ViDi2.IRegexModel.Regex">
            <summary>
            Gets or sets the regular expression to search for. In UTF-8.
            </summary>
        </member>
        <member name="P:ViDi2.IRegexModel.SearchSpace">
            <summary>
            Gets the search space of the model.
            </summary>
        </member>
        <member name="P:ViDi2.IStringModel.MinLength">
            <summary>
            Gets or sets the minimum length of the found string
            <para/>(Between 3 and 10,000)
            </summary>
        </member>
        <member name="P:ViDi2.IStringModel.SearchSpace">
            <summary>
            Gets the search space of the model.
            </summary>
        </member>
        <member name="M:ViDi2.IModelItemList`1.Add">
            <summary>
            Adds a new node
            </summary>
            <returns>reference to the newly created node</returns>
        </member>
        <member name="M:ViDi2.IModelItemList`1.Remove(System.Int32)">
            <summary>
            Removes a node
            </summary>
            <param name="index">index of the node</param>
        </member>
        <member name="P:ViDi2.IModelItemList`1.Count">
            <summary>
            Gets the number of nodes in the list
            </summary>
        </member>
        <member name="P:ViDi2.IModelItemList`1.Item(System.Int32)">
            <summary>
            Gets the node with the given index
            </summary>
            <param name="index">the node index</param>
            <returns>reference to the node</returns>
        </member>
        <member name="M:ViDi2.IModelItemList`1.DeferChangedSignal">
            <summary>
            Enters a defer cycle to merge changes in a single signal
            </summary>
            <returns>an IDisposable to trigger the signal</returns>
        </member>
        <member name="T:ViDi2.INodeList">
            <summary>
            Represents a list of NodeModel nodes
            </summary>
        </member>
        <member name="T:ViDi2.INode">
            <summary>
            Represents a node of a blue tool node model
            </summary>
        </member>
        <member name="P:ViDi2.INode.Fielding">
            <summary>
            Gets or sets the feature names this node matches
            </summary>
        </member>
        <member name="P:ViDi2.INode.Names">
            <summary>
            Gets or sets the feature names this node matches
            </summary>
        </member>
        <member name="P:ViDi2.INode.Index">
            <summary>
            Gets the index of the node
            </summary>
        </member>
        <member name="P:ViDi2.INode.Position">
            <summary>
            Gets or sets the nodes position in model coordinates
            </summary>
        </member>
        <member name="P:ViDi2.INode.Oriented">
            <summary>
            Gets or sets whether this node is oriented
            </summary>
        </member>
        <member name="P:ViDi2.INode.Angle">
            <summary>
            Gets or sets the node orientation
            <para/>Returns radian value.
            <para/>Multiply by 180/PI to get degree value(º) like the below example.
            <para/>
            <para/>[Example] 
            <para/>If Angle value = 1.57079632... 
            <para/>Angle * (180/Math.PI) => 90 (º)
            </summary>
        </member>
        <member name="P:ViDi2.INode.Size">
            <summary>
            Gets or sets the node size in pixel
            </summary>
        </member>
        <member name="P:ViDi2.INode.Threshold">
            <summary>
            Gets or sets the node threshold
            <para/>(Between 0 and 1)
            </summary>
        </member>
        <member name="T:ViDi2.ILayoutModel">
            <summary>
            Represents a blue tool model that is comprised of regions
            </summary>
        </member>
        <member name="P:ViDi2.ILayoutModel.Regions">
            <summary>
            Gets the Region list of the model
            </summary>
        </member>
        <member name="T:ViDi2.ILayoutModelRegionList">
            <summary>
            Represents a list of regions of a blue tool layout model
            </summary>
        </member>
        <member name="M:ViDi2.ILayoutModelRegionList.Add(System.String)">
            <summary>
            Adds a new region
            </summary>
            <param name="regionName">name of the region</param>
            <returns>reference to the newly created region</returns>
        </member>
        <member name="T:ViDi2.ILayoutModelRegion">
            <summary>
            Represents a region of a blue tool layout model
            </summary>
        </member>
        <member name="P:ViDi2.ILayoutModelRegion.Name">
            <summary>
            The name of the region
            </summary>
        </member>
        <member name="P:ViDi2.ILayoutModelRegion.Units">
            <summary>
            Gets or sets in what units the origin and size of the region is given
            </summary>
        </member>
        <member name="P:ViDi2.ILayoutModelRegion.Origin">
            <summary>
            The origin of the region
            </summary>
        </member>
        <member name="P:ViDi2.ILayoutModelRegion.Size">
            <summary>
            The width and height of the region
            </summary>
        </member>
        <member name="P:ViDi2.ILayoutModelRegion.Occurrences">
            <summary>
            The number of times the specified feature can show up in this region
            </summary>
        </member>
        <member name="P:ViDi2.ILayoutModelRegion.FeatureFilter">
            <summary>
            The feature filter that matches the types of features that are acceptable for this region
            </summary>
        </member>
        <member name="T:ViDi2.IModelList">
            <summary>
            Represents a list of blue models
            </summary>
        </member>
        <member name="M:ViDi2.IModelList.Add(System.String,ViDi2.ModelType)">
            <summary>
            Adds a new model
            </summary>
            <param name="name">name of the model</param>
            <returns>a reference to the newly created model</returns>
        </member>
        <member name="M:ViDi2.IModelList.Add(System.String,System.IO.Stream)">
            <summary>
            Adds a model from a buffer
            </summary>
            <param name="name">name of the model</param>
            <param name="data">data containing the model</param>
            <returns></returns>
        </member>
        <member name="M:ViDi2.IModelList.Remove(System.String)">
            <summary>
            Removes a model
            </summary>
            <param name="name">name of the model</param>
        </member>
        <member name="T:ViDi2.INameList`1">
            <summary>
            Represents a list of named items
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:ViDi2.INameList`1.Count">
            <summary>
            Gets the number of items in the list
            </summary>
        </member>
        <member name="P:ViDi2.INameList`1.Names">
            <summary>
            Returns a list of the item names
            </summary>
        </member>
        <member name="P:ViDi2.INameList`1.Item(System.String)">
            <summary>
            Gets an item given its name
            </summary>
            <param name="name">the name of the item</param>
            <returns>a reference to the item</returns>
        </member>
        <member name="T:ViDi2.IToolList`1">
            <summary>
            Represents a hierarchical list of tools
            </summary>
        </member>
        <member name="P:ViDi2.IToolList`1.Descendants">
            <summary>
            Gets an enumerator to all the tools in this list including descendents
            </summary>
        </member>
        <member name="T:ViDi2.ParameterChangedHandler">
            <summary>
            Handler called when any tool parameter was modified
            </summary>
            <param name="name">the parameter name</param>
        </member>
        <member name="P:ViDi2.IParameters.List">
            <summary>
            Gets a list of all parameters as an XML document
            </summary>
        </member>
        <member name="P:ViDi2.IParameters.Item(System.String)">
            <summary>
            Gets or sets the value of named parameter
            </summary>
            <param name="name">the full name of the parameter (including its path)</param>
        </member>
        <member name="E:ViDi2.IParameters.Changed">
            <summary>
            Occurs when any parameter has been changed
            </summary>
        </member>
        <member name="E:ViDi2.IParameters.ChangedAsync">
            <summary>
            Occurs when any parameter has been changed
            each event handler is run asynchronously
            </summary>
        </member>
        <member name="T:ViDi2.IRegionOfInterest">
            <summary>
            Represents a tools region-of-interest (ROI)
            </summary>
        </member>
        <member name="P:ViDi2.IRegionOfInterest.Mask">
            <summary>
            Sets the mask
            </summary>
        </member>
        <member name="M:ViDi2.IRegionOfInterest.Export">
            <summary>
            Exports the region of interest to a stream
            </summary>
            <returns>stream with the region of interest data</returns>
        </member>
        <member name="M:ViDi2.IRegionOfInterest.Import(System.IO.Stream)">
            <summary>
            Imports the region of interest from a stream
            </summary>
            <param name="stream">stream containing the region of interest data</param>
        </member>
        <member name="P:ViDi2.IRegionOfInterest.Scale">
            <summary>
            Gets or sets the horizontal and vertical factors by which the view will be scaled
            </summary>
        </member>
        <member name="P:ViDi2.IRegionOfInterest.Parent">
            <summary>
            Gets the parent tool of the tool
            </summary>
        </member>
        <member name="P:ViDi2.IRegionOfInterest.Parameters">
            <summary>
            Gets the region of interest parameters
            </summary>
        </member>
        <member name="T:ViDi2.IManualRegionOfInterest">
            <summary>
            Represents a manual ROI
            </summary>
        </member>
        <member name="P:ViDi2.IManualRegionOfInterest.Parameters">
            <summary>
            Gets the region of interest parameters
            </summary>
        </member>
        <member name="P:ViDi2.IManualRegionOfInterest.External">
            <summary>
            Gets or sets whether the views are created externally or
            based on the ROI's parameters
            </summary>
        </member>
        <member name="P:ViDi2.IManualRegionOfInterest.Mode">
            <summary>
            Gets or sets the ROI's fixturing mode
            </summary>
        </member>
        <member name="P:ViDi2.IManualRegionOfInterest.Units">
            <summary>
            Gets or sets the coordinates unit
            </summary>
        </member>
        <member name="P:ViDi2.IManualRegionOfInterest.Offset">
            <summary>
            Gets or sets the ROI offset (upper-left corner)
            </summary>
        </member>
        <member name="P:ViDi2.IManualRegionOfInterest.Size">
            <summary>
            Gets or sets the ROI size
            </summary>
        </member>
        <member name="P:ViDi2.IManualRegionOfInterest.Angle">
            <summary>
            Gets or sets the ROI angle
            <para/>Returns radian value
            <para/>Multiply by 180/PI to get degree value(º) like the below example.
            <para/>
            <para/>[Example] 
            <para/>If Angle value = 1.57079632... 
            <para/>Angle * (180/Math.PI) => 90 (º)
            </summary>
        </member>
        <member name="P:ViDi2.IManualRegionOfInterest.SplittingGrid">
            <summary>
            Gets or sets the splitting grid,i.e. the number equally sized subviews to generate in the horizontal and vertical direction
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:ViDi2.IManualRegionOfInterest.ClearViews(ViDi2.FrameKey)" -->
        <!-- Badly formed XML comment ignored for member "M:ViDi2.IManualRegionOfInterest.AddView(ViDi2.FrameKey,ViDi2.Size,ViDi2.Matrix,ViDi2.IImage)" -->
        <member name="T:ViDi2.IBlueRegionOfInterest">
            <summary>
            Represents an ROI based on the result of a blue tool
            </summary>
        </member>
        <member name="P:ViDi2.IBlueRegionOfInterest.Model">
            <summary>
            Gets or sets the model of the blue tool to use
            </summary>
        </member>
        <member name="P:ViDi2.IBlueRegionOfInterest.Models">
            <summary>
            Gets the available models
            </summary>
        </member>
        <member name="P:ViDi2.IBlueRegionOfInterest.Parameters">
            <summary>
            Gets the region of interest parameters
            </summary>
        </member>
        <member name="P:ViDi2.IBlueRegionOfInterest.TargetMode">
            <summary>
            Gets or sets the target-mode, i.e. whether views are created from features or matches
            </summary>
        </member>
        <member name="P:ViDi2.IBlueRegionOfInterest.FeatureFilter">
            <summary>
            Gets or sets the feature filter, only used if in feature target mode
            </summary>
        </member>
        <member name="P:ViDi2.IBlueRegionOfInterest.MatchFilter">
            <summary>
            Gets or sets the match filter, only used if in match target mode
            </summary>
        </member>
        <member name="P:ViDi2.IBlueRegionOfInterest.MatchItems">
            <summary>
            Gets or sets the index of the Match Items to extract. Extracts all if empty.
            </summary>
        </member>
        <member name="P:ViDi2.IBlueRegionOfInterest.MatchItemsMode">
            <summary>
            Gets or sets the match item mode which determines which items are extracted
            </summary>
        </member>
        <member name="P:ViDi2.IBlueRegionOfInterest.Centered">
            <summary>
            Gets or sets whether the ROI is centered on the origin of the model
            </summary>
        </member>
        <member name="P:ViDi2.IBlueRegionOfInterest.Units">
            <summary>
            Gets or sets the coordinates unit
            </summary>
        </member>
        <member name="P:ViDi2.IBlueRegionOfInterest.Offset">
            <summary>
            Gets or sets the ROI offset
            </summary>
        </member>
        <member name="P:ViDi2.IBlueRegionOfInterest.Size">
            <summary>
            Gets or sets the ROI size
            </summary>
        </member>
        <member name="P:ViDi2.IBlueRegionOfInterest.Angle">
            <summary>
            Gets or sets the ROI angle
            <para/>Returns radian value
            <para/>Multiply by 180/PI to get degree value(º) like the below example.
            <para/>
            <para/>[Example] 
            <para/>If Angle value = 1.57079632... 
            <para/>Angle * (180/Math.PI) => 90 (º)
            </summary>
        </member>
        <member name="P:ViDi2.IBlueRegionOfInterest.Scaled">
            <summary>
            Gets or sets whether the ROI is scaled to the reference frame of the found model
            </summary>
        </member>
        <member name="P:ViDi2.IBlueRegionOfInterest.Scale">
            <summary>
            Gets or sets the factor by which the model reference frame is scaled (only if scaled is set to true)
            </summary>
        </member>
        <member name="T:ViDi2.IRedRegionOfInterest">
            <summary>
            Reprents an ROI based on the result of a red tool
            </summary>
        </member>
        <member name="P:ViDi2.IRedRegionOfInterest.Parameters">
            <summary>
            Gets the region of interest parameters
            </summary>
        </member>
        <member name="P:ViDi2.IRedRegionOfInterest.ExtractRegions">
            <summary>
            Gets or sets whether to extract a view for each region found by the red tool
            </summary>
        </member>
        <member name="P:ViDi2.IRedRegionOfInterest.RegionFilter">
            <summary>
            Gets or sets the filter that determines whether a region will be extracted
            This is only available when extract regions is true. Regions that match the filter
            will be extracted
            examples 
            score &gt; T2  only regions with score greater than T2
            x &lt; 100 and y &lt; 100  only if the center of mass of the region is in x/y [0,100] pixel
            name='defect' only extracts regions with name defect
            </summary>
        </member>
        <member name="P:ViDi2.IRedRegionOfInterest.Units">
            <summary>
            Gets or sets the border unit
            </summary>
        </member>
        <member name="P:ViDi2.IRedRegionOfInterest.Border">
            <summary>
            Gets or sets the border to add around extracted regions
            </summary>
        </member>
        <member name="P:ViDi2.IRedRegionOfInterest.MaskRegions">
            <summary>
            Gets or sets whether the regions are masked
            </summary>
        </member>
        <member name="P:ViDi2.IRedRegionOfInterest.FailOnFilter">
            <summary>
            Gets or sets whether the view will be extracted based on a filter
            </summary>
        </member>
        <member name="P:ViDi2.IRedRegionOfInterest.FailFilter">
            <summary>
            Gets or sets the filter that determines whether a view will be extracted 
            </summary>
        </member>
        <member name="P:ViDi2.IRedRegionOfInterest.RecycleMask">
            <summary>
            Gets or sets whether the mask of the previous tool is reused
            </summary>
        </member>
        <member name="P:ViDi2.IRedRegionOfInterest.InvertMask">
            <summary>
            Gets or sets whether to invert the region mask
            </summary>
        </member>
        <member name="P:ViDi2.IRedRegionOfInterest.GrowShrinkMask">
            <summary>
            Gets or sets by how much the mask will be grown (&gt;0) or shrunk (&lt;0)
            </summary>
        </member>
        <member name="T:ViDi2.IGreenRegionOfInterest">
            <summary>
            Reprents an ROI based on the result of a green tool
            </summary>
        </member>
        <member name="P:ViDi2.IGreenRegionOfInterest.Parameters">
            <summary>
            Gets the region of interest parameters
            </summary>
        </member>
        <member name="P:ViDi2.IGreenRegionOfInterest.Filter">
            <summary>
            Gets or sets the filter string to use to determine whether a view is generated
            </summary>
            <example>
             Filter use the general filter syntax (as is database explorer)
             Example :   best_tag~'class_1' will match tags that contains "class_1" (xxxclass_1xxx will be matched)
                         best_tag='class_1' will match tags that are strictly equal to "class_1" (xxxclass_1xxx won't be matched)
            </example>
        </member>
        <member name="P:ViDi2.IRegionOfInterestParameters.Scale">
            <summary>
            Gets or sets the horizontal and vertical factors by which the view will be scaled
            </summary>
        </member>
        <member name="T:ViDi2.UnitsMode">
            <summary>
            Selects the coordinate units
            </summary>
        </member>
        <member name="F:ViDi2.UnitsMode.Percent">
            <summary>
            Relative coordinates in percent of the image/view dimensions
            </summary>
        </member>
        <member name="F:ViDi2.UnitsMode.Pixel">
            <summary>
            Absolute coordinates in pixel
            </summary>
        </member>
        <member name="T:ViDi2.ManualRegionOfInterestMode">
            <summary>
            Selects mode by which the manual segmenter creates views
            </summary>
        </member>
        <member name="F:ViDi2.ManualRegionOfInterestMode.Internal">
            <summary>
            Views are created based on the ROI's parameters
            </summary>
        </member>
        <member name="F:ViDi2.ManualRegionOfInterestMode.External">
            <summary>
            Views are created with the AddView method, whereas the ROI Size
            property is used as the view size
            </summary>
        </member>
        <member name="F:ViDi2.ManualRegionOfInterestMode.ExternalSize">
            <summary>
            Views are created with the AddView method, whereas the ROI Size
            property is ignored, i.e. the size supplied to the AddView method is used
            </summary>
        </member>
        <member name="P:ViDi2.IManualRegionOfInterestParameters.Mode">
            <summary>
            Gets or sets the ROI's fixturing mode
            </summary>
        </member>
        <member name="P:ViDi2.IManualRegionOfInterestParameters.Units">
            <summary>
            Gets or sets the coordinates unit
            </summary>
        </member>
        <member name="P:ViDi2.IManualRegionOfInterestParameters.Offset">
            <summary>
            Gets or sets the ROI offset (upper-left corner)
            </summary>
        </member>
        <member name="P:ViDi2.IManualRegionOfInterestParameters.Size">
            <summary>
            Gets or sets the ROI size
            </summary>
        </member>
        <member name="P:ViDi2.IManualRegionOfInterestParameters.Angle">
            <summary>
            Gets or sets the ROI angle
            <para/>Returns radian value
            <para/>Multiply by 180/PI to get degree value(º) like the below example.
            <para/>
            <para/>[Example] 
            <para/>If Angle value = 1.57079632... 
            <para/>Angle * (180/Math.PI) => 90 (º)
            </summary>
        </member>
        <member name="P:ViDi2.IManualRegionOfInterestParameters.SplittingGrid">
            <summary>
            Gets or sets the splitting grid,i.e. the number equally sized subviews to generate in the horizontal and vertical direction
            </summary>
        </member>
        <member name="T:ViDi2.BlueRegionOfInterestTargetMode">
            <summary>
            Defines the blue ROI target mode
            </summary>
        </member>
        <member name="F:ViDi2.BlueRegionOfInterestTargetMode.Features">
            <summary>
            Target features
            </summary>
        </member>
        <member name="F:ViDi2.BlueRegionOfInterestTargetMode.Matches">
            <summary>
            Target matches
            </summary>
        </member>
        <member name="F:ViDi2.BlueRegionOfInterestTargetMode.MatchItems">
            <summary>
            Target match items, i.e. nodes or regions for NodeModels and LayoutModels respectively
            </summary>
        </member>
        <member name="T:ViDi2.BlueRegionOfInterestMatchItemsMode">
            <summary>
            Defines the blue ROI match items mode
            </summary>
        </member>
        <member name="F:ViDi2.BlueRegionOfInterestMatchItemsMode.Any">
            <summary>
            Extract any item
            </summary>
        </member>
        <member name="F:ViDi2.BlueRegionOfInterestMatchItemsMode.Unmatched">
            <summary>
            Extract only unmatched items
            </summary>
        </member>
        <member name="F:ViDi2.BlueRegionOfInterestMatchItemsMode.Matched">
            <summary>
            Extract only matched items
            </summary>
        </member>
        <member name="P:ViDi2.IBlueRegionOfInterestParameters.TargetMode">
            <summary>
            Gets or sets the target-mode, i.e. whether views are created from features or matches
            </summary>
        </member>
        <member name="P:ViDi2.IBlueRegionOfInterestParameters.FeatureFilter">
            <summary>
            Gets or sets the feature filter, only used if in feature target mode
            </summary>
        </member>
        <member name="P:ViDi2.IBlueRegionOfInterestParameters.MatchFilter">
            <summary>
            Gets or sets the match filter, only used if in match target mode
            </summary>
        </member>
        <member name="P:ViDi2.IBlueRegionOfInterestParameters.MatchItems">
            <summary>
            Gets or sets the index of the Match Items to extract. Extracts all if empty.
            </summary>
        </member>
        <member name="P:ViDi2.IBlueRegionOfInterestParameters.MatchItemsMode">
            <summary>
            Gets or sets the match item mode which determines which items are extracted
            </summary>
        </member>
        <member name="P:ViDi2.IBlueRegionOfInterestParameters.Centered">
            <summary>
            Gets or sets whether the ROI is centered on the origin of the model
            </summary>
        </member>
        <member name="P:ViDi2.IBlueRegionOfInterestParameters.Units">
            <summary>
            Gets or sets the coordinates unit
            </summary>
        </member>
        <member name="P:ViDi2.IBlueRegionOfInterestParameters.Offset">
            <summary>
            Gets or sets the ROI offset
            </summary>
        </member>
        <member name="P:ViDi2.IBlueRegionOfInterestParameters.Size">
            <summary>
            Gets or sets the ROI size
            </summary>
        </member>
        <member name="P:ViDi2.IBlueRegionOfInterestParameters.Angle">
            <summary>
            Gets or sets the ROI angle
            <para/>Returns radian value.
            <para/>Multiply by 180/PI to get degree value(º) like the below example.
            <para/>
            <para/>[Example] 
            <para/>If Angle value = 1.57079632... 
            <para/>Angle * (180/Math.PI) => 90 (º)
            </summary>
        </member>
        <member name="P:ViDi2.IBlueRegionOfInterestParameters.Scaled">
            <summary>
            Gets or sets whether the ROI is scaled to the reference frame of the found model
            </summary>
        </member>
        <member name="P:ViDi2.IBlueRegionOfInterestParameters.Scale">
            <summary>
            Gets or sets the factor by which the model reference frame is scaled (only if scaled is set to true)
            </summary>
        </member>
        <member name="P:ViDi2.IRedRegionOfInterestParameters.ExtractRegions">
            <summary>
            Gets or sets whether to extract a view for each region found by the red tool
            </summary>
        </member>
        <member name="P:ViDi2.IRedRegionOfInterestParameters.RegionFilter">
            <summary>
            Gets or sets the filter that determines whether a region will be extracted
            This is only available when extract regions is true. Regions that match the filter
            will be extracted
            examples
            score &gt; T2  only regions with score greater than T2
            x &lt; 100 and y &lt; 100  only if the center of mass of the region is in x/y [0,100] pixel
            name='defect' only extracts regions with name defect
            </summary>
        </member>
        <member name="P:ViDi2.IRedRegionOfInterestParameters.Units">
            <summary>
            Gets or sets the border unit
            </summary>
        </member>
        <member name="P:ViDi2.IRedRegionOfInterestParameters.Border">
            <summary>
            Gets or sets the border to add around extracted regions
            </summary>
        </member>
        <member name="P:ViDi2.IRedRegionOfInterestParameters.MaskRegions">
            <summary>
            Gets or sets whether the regions are masked
            </summary>
        </member>
        <member name="P:ViDi2.IRedRegionOfInterestParameters.FailOnFilter">
            <summary>
            Gets or sets whether the view will be extracted based on a filter
            </summary>
        </member>
        <member name="P:ViDi2.IRedRegionOfInterestParameters.FailFilter">
            <summary>
            Gets or sets the filter that determines whether a view will be extracted
            </summary>
        </member>
        <member name="P:ViDi2.IRedRegionOfInterestParameters.RecycleMask">
            <summary>
            Gets or sets whether the mask of the previous tool is reused
            </summary>
        </member>
        <member name="P:ViDi2.IRedRegionOfInterestParameters.InvertMask">
            <summary>
            Gets or sets whether to invert the region mask
            </summary>
        </member>
        <member name="P:ViDi2.IRedRegionOfInterestParameters.GrowShrinkMask">
            <summary>
            Gets or sets by how much the mask will be grown (&gt;0) or shrunk (&lt;0)
            </summary>
        </member>
        <member name="P:ViDi2.IGreenRegionOfInterestParameters.Filter">
            <summary>
            Gets or sets the filter string to use to determine whether a view is generated
            </summary>
            <example>
             Filter use the general filter syntax (as is database explorer)
             Example :   best_tag~'class_1' will match tags that contains "class_1" (xxxclass_1xxx will be matched)
                         best_tag='class_1' will match tags that are strictly equal to "class_1" (xxxclass_1xxx won't be matched)
            </example>
        </member>
        <member name="T:ViDi2.ISample">
            <summary>
            Represents a processed sample
            </summary>
        </member>
        <member name="P:ViDi2.ISample.Name">
            <summary>
            Gets the name of the sample
            </summary>
        </member>
        <member name="M:ViDi2.ISample.AddImage(ViDi2.IImage)">
            <summary>
            Adds an image to the sample
            </summary>
            <param name="image">the image to add</param>
        </member>
        <member name="P:ViDi2.ISample.Markings">
            <summary>
            Gets a dictionary of the markings for the processed single frame
            </summary>
        </member>
        <member name="P:ViDi2.ISample.Frames">
            <summary>
            Gets a list of dictionary containg the markings for the processed sequence of frames
            </summary>
        </member>
        <member name="P:ViDi2.ISample.Image">
            <summary>
            Gets the processed image
            </summary>
        </member>
        <member name="P:ViDi2.ISample.Images">
            <summary>
            Gets the collection of processed images
            </summary>
        </member>
        <member name="M:ViDi2.ISample.Process(ViDi2.ITool,System.Collections.Generic.List{System.Int32})">
            <summary>
            Processes the selected tool
            </summary>
        </member>
        <member name="M:ViDi2.ISample.AddView(ViDi2.ITool,ViDi2.Size,ViDi2.Matrix,ViDi2.IImage)">
            <summary>
            Processes the selected tool
            </summary>
        </member>
        <member name="P:ViDi2.ISample.Tools">
            <summary>
            Gets the list of tools that processed this sample
            </summary>
        </member>
        <member name="T:ViDi2.IBatchedSample">
            <summary>
            Represents a batched sample of images used for runtime HDM green processing
            </summary>
        </member>
        <member name="P:ViDi2.IBatchedSample.Name">
            <summary>
            Gets the name of the batched sample
            </summary>
        </member>
        <member name="M:ViDi2.IBatchedSample.AddImage(ViDi2.IImage)">
            <summary>
            Adds an image to the batched sample
            </summary>
        </member>
        <member name="M:ViDi2.IBatchedSample.Process(ViDi2.ITool,System.Collections.Generic.List{System.Int32})">
            <summary>
            Processes the selected tool, the selected tool must an HDM green tool
            </summary>
        </member>
        <member name="M:ViDi2.IBatchedSample.Tags(ViDi2.ITool,System.Int32)">
            <summary>
            Gets the result of batched processing on the batched sample
            </summary>
            <param name="Tool">The tool</param>
            <param name="index">The index in the batch</param>
            <returns>Dictionary of probabilities for each class(key - class name, value - probability)</returns>
        </member>
        <member name="T:ViDi2.ISimilarityReference">
            <summary>
            Represents a reference of the similarity model
            </summary>
        </member>
        <member name="P:ViDi2.ISimilarityReference.Tag">
            <summary>
            Gets the tag name of the reference
            </summary>
        </member>
        <member name="P:ViDi2.ISimilarityReference.Thumbnail">
            <summary>
            Thumbnail of the reference
            </summary>
        </member>
        <member name="T:ViDi2.ISimilarityReferenceList">
            <summary>
            Collection of similarity references
            </summary>
        </member>
        <member name="M:ViDi2.ISimilarityReferenceList.Add(System.String,ViDi2.ISample,System.Collections.Generic.List{System.Int32},System.Collections.Generic.List{System.Int32})">
            <summary>
            Add sample view(s) as new similarity references
            </summary>
            <param name="tag">the tag name of the views to added as new similarity references</param>
            <param name="sample">the sample from which reference views are added as similarity references</param>
            <param name="frame_index">the indices of frames to be added, null to add all</param>
            <param name="view_index">the indices of views to be added, null to add all</param>
        </member>
        <member name="M:ViDi2.ISimilarityReferenceList.Remove(System.Collections.Generic.List{System.Int32})">
            <summary>
            Remove similarity references
            </summary>
            <param name="reference_index">the reference index, null to remove all references</param>
        </member>
        <member name="T:ViDi2.IStream">
            <summary>
            Represents a processing stream
            </summary>
        </member>
        <member name="P:ViDi2.IStream.Name">
            <summary>
            Gets the stream name
            </summary>
        </member>
        <member name="P:ViDi2.IStream.Uuid">
            <summary>
            Gets the stream's UUID
            </summary>
        </member>
        <member name="P:ViDi2.IStream.ObjectId">
            <summary>
            Gets the volatile UUID that generated when stream object is created.
            This property is used to identify individual workspace object even they have the same UUID.
            </summary>
        </member>
        <member name="P:ViDi2.IStream.Parameters">
            <summary>
            Gets the stream parameters
            </summary>
        </member>
        <member name="P:ViDi2.IStream.FrameWindow">
            <summary>
            Gets the number of images over which individual frames are generated
            </summary>
        </member>
        <member name="P:ViDi2.IStream.Tools">
            <summary>
            Gets the list of tools (only root children) of this stream
            </summary>
        </member>
        <member name="P:ViDi2.IStream.Workspace">
            <summary>
            Gets the parent workspace
            </summary>
        </member>
        <member name="M:ViDi2.IStream.Process(ViDi2.IImage,System.String,System.Collections.Generic.List{System.Int32})">
            <summary>
            Process a sample image
            </summary>
            <param name="image">the image to process</param>
            <param name="parameters">[Obsolete] This argument is deprecated. only reserved for legacy.</param>
            <param name="gpuDevices"></param>
            <returns></returns>
        </member>
        <member name="M:ViDi2.IStream.CreateSample">
            <summary>
            Creates a new empty sample
            </summary>
        </member>
        <member name="M:ViDi2.IStream.CreateSample(ViDi2.IImage)">
            <summary>
            Creates a new sample for the given image
            </summary>
            <param name="image"></param>
        </member>
        <member name="T:ViDi2.ToolType">
            <summary>
            Represents the tool type
            </summary>
        </member>
        <member name="F:ViDi2.ToolType.Unknown">
            <summary>
            Unknwon tool type
            </summary>
        </member>
        <member name="F:ViDi2.ToolType.Blue">
            <summary>
            A blue tool for feature localization and identification
            </summary>
        </member>
        <member name="F:ViDi2.ToolType.BlueRead">
            <summary>
            A blue tool for feature localization and identification
            </summary>
        </member>
        <member name="F:ViDi2.ToolType.Red">
            <summary>
            A red tool for defect and anomaly detection
            </summary>
        </member>
        <member name="F:ViDi2.ToolType.Green">
            <summary>
            A green tool for scene tagging and object classification
            </summary>
        </member>
        <member name="F:ViDi2.ToolType.GreenHighDetail">
            <summary>
            A green tool for scene tagging and object classification based on High-detail architecture
            </summary>
        </member>
        <member name="F:ViDi2.ToolType.GreenQuickHighDetail">
            <summary>
            A green tool for scene tagging and object classification based on Quick High-detail architecture
            </summary>
        </member>
        <member name="F:ViDi2.ToolType.RedHighDetail">
            <summary>
            A red tool for defect detection based on High-detail architecture
            </summary>
        </member>
        <member name="F:ViDi2.ToolType.RedQuickHighDetail">
            <summary>
            A red tool for defect detection based on Quick High-detail architecture
            </summary>
        </member>
        <member name="M:ViDi2.ToolTypeExt.IsHDM(System.Nullable{ViDi2.ToolType},System.Boolean)">
            <summary>
            Green HDM or Green HDM Quick or Red HDM or Red HDM Quick
            </summary>
            <param name="type">Tool Type to compare</param>
            <param name="includeQuick">Whether HDM Quick types is included</param>
            <returns>true if there is a matching type</returns>
        </member>
        <member name="M:ViDi2.ToolTypeExt.IsHDMQuick(System.Nullable{ViDi2.ToolType})">
            <summary>
            Green HDM Quick or Red HDM Quick
            </summary>
            <param name="type">Tool Type to compare</param>
            <returns>true if there is a matching type</returns>
        </member>
        <member name="M:ViDi2.ToolTypeExt.IsGreen(System.Nullable{ViDi2.ToolType})">
            <summary>
            Green Focused or Green HDM or Green HDM Quick
            </summary>
            <param name="type">Tool Type to compare</param>
            <returns>true if there is a matching type</returns>
        </member>
        <member name="M:ViDi2.ToolTypeExt.IsRed(System.Nullable{ViDi2.ToolType})">
            <summary>
            Red Focused or Red HDM or Red HDM Quick
            </summary>
            <param name="type">Tool Type to compare</param>
            <returns>true if there is a matching type</returns>
        </member>
        <member name="M:ViDi2.ToolTypeExt.IsBlue(System.Nullable{ViDi2.ToolType})">
            <summary>
            Blue Locate or Blue Read
            </summary>
            <param name="type">Tool Type to compare</param>
            <returns>true if there is a matching type</returns>
        </member>
        <member name="M:ViDi2.ToolTypeExt.IsGreenHDM(System.Nullable{ViDi2.ToolType})">
            <summary>
            Green HDM or Green HDM Quick
            </summary>
            <param name="type">Tool Type to compare</param>
            <returns>true if there is a matching type</returns>
        </member>
        <member name="M:ViDi2.ToolTypeExt.IsRedHDM(System.Nullable{ViDi2.ToolType})">
            <summary>
            Red HDM or Red HDM Quick
            </summary>
            <param name="type">Tool Type to compare</param>
            <returns>true if there is a matching type</returns>
        </member>
        <member name="T:ViDi2.ITool">
            <summary>
            Represents the base of all tools
            </summary>
        </member>
        <member name="P:ViDi2.ITool.Name">
            <summary>
            Gets the tool name
            </summary>
        </member>
        <member name="P:ViDi2.ITool.Stream">
            <summary>
            Gets the tool's parent stream
            </summary>
        </member>
        <member name="P:ViDi2.ITool.Type">
            <summary>
            Gets the tool type
            </summary>
        </member>
        <member name="P:ViDi2.ITool.Uuid">
            <summary>
            Gets the tool UUID
            </summary>
        </member>
        <member name="P:ViDi2.ITool.Children">
            <summary>
            Gets the list of direct child tools
            </summary>
        </member>
        <member name="P:ViDi2.ITool.Parent">
            <summary>
            Gets the tool parent or null if it has none
            </summary>
        </member>
        <member name="P:ViDi2.ITool.Parameters">
            <summary>
            Gets the tool parameters
            </summary>
        </member>
        <member name="P:ViDi2.ITool.ParametersBase">
            <summary>
            Gets the tool parameters
            <para/>Interface class of ToolParamaters, You may access the below instances that matched against the tool type.
            <para/>IBlueToolParameters, IRedToolParameters, IGreenToolParameters
            </summary>
        </member>
        <member name="P:ViDi2.ITool.RegionOfInterest">
            <summary>
            Gets the tool region of interest
            </summary>
        </member>
        <member name="M:ViDi2.ITool.Process(ViDi2.IImage,System.String,System.Collections.Generic.List{System.Int32})">
            <summary>
            Process a sample image
            </summary>
            <param name="image">the image to process</param>
            <param name="parameters"></param>
            <param name="gpuDevices"></param>
            <returns>the sample structure to access the processing result</returns>
        </member>
        <member name="T:ViDi2.IBlueTool">
            <summary>
            Represents the base of blue tools
            </summary>
        </member>
        <member name="P:ViDi2.IBlueTool.Models">
            <summary>
            Gets the list of availabel models
            </summary>
        </member>
        <member name="P:ViDi2.IBlueTool.Parameters">
            <summary>
            Gets the tool parameters
            </summary>
        </member>
        <member name="P:ViDi2.IBlueTool.KnownFeatures">
            <summary>
            Gets the collection of feature types known to the tool (features that were trained)
            </summary>
        </member>
        <member name="T:ViDi2.IRedTool">
            <summary>
            Represents the base of red tools
            </summary>
        </member>
        <member name="P:ViDi2.IRedTool.Parameters">
            <summary>
            Gets the tool parameters
            </summary>
        </member>
        <member name="P:ViDi2.IRedTool.KnownClasses">
            <summary>
            Gets the collection of feature types known to the tool (only classes that were trained)
            </summary>
        </member>
        <member name="T:ViDi2.IGreenTool">
            <summary>
            Represents the base of green tools
            </summary>
        </member>
        <member name="P:ViDi2.IGreenTool.Parameters">
            <summary>
            Gets the tool parameters
            </summary>
        </member>
        <member name="P:ViDi2.IGreenTool.KnownTags">
            <summary>
            Returns all known tags (tags that were trained)
            </summary>
        </member>
        <member name="P:ViDi2.IGreenTool.SimilarityReferences">
            <summary>
            Get the similirarity references list
            </summary>
        </member>
        <member name="M:ViDi2.IGreenTool.TrainSimilarityModel">
            <summary>
            Train the similarity model
            </summary>
        </member>
        <member name="T:ViDi2.BorderType">
            <summary>
            Specifies the border modes
            <para/>Specifies a way to sample outside pixels of image.
            </summary>
        </member>
        <member name="T:ViDi2.MaskingMode">
            <summary>
            Specifies the masking modes
            <para/>Specifies a way to apply a mask on sampled image. The mask is used to hide some portions of an image and to reveal some portions.
            </summary>
        </member>
        <member name="T:ViDi2.FlippingMode">
            <summary>
            Specifies the perturbation flipping modes
            <para/>Specifies a way to flip the images randomly during sampling. 
            </summary>
        </member>
        <member name="P:ViDi2.IToolParameters.SamplingDensity">
            <summary>
            Gets or sets the sampling density used for processing
            <para/>The smaller the number, the fewer samples will be taken of the image.
            <para/>(Between 0.2 and 10)
            </summary>
        </member>
        <member name="P:ViDi2.IToolParameters.FeatureSize">
            <summary>
            Gets or sets the features size of the tool
            <para/>The tool will actually see an area five times larger than the Feature Size setting. 
            <para/>However, the level of detail will be much higher in the center of the feature, as opposed to the periphery.
            <para/>(Between 5 and 100,000)
            </summary>
        </member>
        <member name="P:ViDi2.IToolParameters.ColorChannels">
            <summary>
            Gets the number of color channels
            <para/>Specifies the number of color channels to use when sampling the image. 
            <para/>1 : Treats the image as greyscale
            <para/>2 : Channels images (gray+alpha or B+G)
            <para/>3 : BGR image.
            <para/>4 : BGRA image
            </summary>
        </member>
        <member name="P:ViDi2.IToolParameters.ChannelFormat">
            <summary>
            Gets the channel format string
            <para/>L : GrayScale(1ch)
            <para/>LA : GrayScale + Alpha (2ch)
            <para/>BG, BR, GR (2ch)
            <para/>BGR(3ch)
            <para/>BGRA(4ch)
            </summary>
        </member>
        <member name="P:ViDi2.IToolParameters.LowPrecision">
            <summary>
            Get or sets whether the tool use low-precision mode.
            <para/>If your system meets certain specific requirements (CUDA Compute Capability 6.1 or greater), 
            <para/>You can enable the Low Precision processing mode for Red Analyze and Green Classify tools. 
            <para/>
            <para/>(Warning) Once set to true, the parameter cannot be reverted
            </summary>
        </member>
        <member name="P:ViDi2.IToolParameters.SupportsLowPrecision">
            <summary>
            Returns true if the tool supports low-precision mode
            </summary>
        </member>
        <member name="P:ViDi2.IToolParameters.TrainingMode">
            <summary>
            Returns the training mode in Red-Tool(Focused Mode)
            <para/>"unsupervised" or "supervised"
            </summary>
        </member>
        <member name="T:ViDi2.IBlueToolParameters">
            <summary>
            Represents the tool-parameters for the runtime blue tool
            </summary>
        </member>
        <member name="P:ViDi2.IBlueToolParameters.Threshold">
            <summary>
            Gets or sets the detection threshold
            <para/>Threshold determines how closely the found feature must be to the desired feature in order for it to be considered detected. 
            <para/>The found feature must exceed the setting.
            <para/>(Between 0 ~ 1)
            </summary>
        </member>
        <member name="P:ViDi2.IBlueToolParameters.Precision">
            <summary>
            Gets or sets the localization precision in % of the feature-size
            <para/>(Between 0 ~ 1)
            <para/>
            <para/>[Example]
            <para/>if Feature Size is 40, and Precision setting is 5%, 
            <para/>the tool will stop searching for the position of the feature 
            <para/>when the next jump would be less than 2 pixels(0.05 * 40 = 2 pixels).
            </summary>
        </member>
        <member name="P:ViDi2.IBlueToolParameters.OrientedFeatures">
            <summary>
            Gets whether the features are oriented
            <para/>In other words, whether the rotation detection of feature is allowed.
            </summary>
        </member>
        <member name="P:ViDi2.IBlueToolParameters.ScaledFeatures">
            <summary>
            Gets whether the features are scaled
            <para/>In other words, whether detection of various sizes is allowed for each feature.
            </summary>
        </member>
        <member name="P:ViDi2.IBlueToolParameters.NonUniformlyScaledFeatures">
            <summary>
            Gets whether the features are scaled non-uniformly
            <para/>In other words, whether detection of various sizes is allowed for each feature.(Not fixed aspect ratio)
            </summary>
        </member>
        <member name="P:ViDi2.IBlueToolParameters.AngleRange">
            <summary>
            Gets or sets the range of angles at which features are searched
            <para/>Returns radian value
            <para/>Multiply by 180/PI to get degree value(º) like the below example.
            <para/>
            <para/>[Example] 
            <para/>If AngleRange.Lower value = 1.57079632... 
            <para/>AngleRange.Lower * (180/Math.PI) => 90 (º)
            </summary>
        </member>
        <member name="P:ViDi2.IBlueToolParameters.SizeRange">
            <summary>
            Gets or sets the range of scales at which features are searched
            </summary>
        </member>
        <member name="P:ViDi2.IBlueToolParameters.AspectRatioRange">
            <summary>
            Gets or sets the range of aspect-ratios at which features are searched
            <para/>Default value is 100
            </summary>
        </member>
        <member name="P:ViDi2.IBlueToolParameters.FeatureFilter">
            <summary>
            Gets or sets the feature filter
            </summary>
        </member>
        <member name="P:ViDi2.IBlueToolParameters.ShowFeatureChiclets">
            <summary>
            Whether the training UI should show or hide the information rectangles about feature ID and match state
            <para/>True : Show Feature Names
            <para/>False : Hide Feature Names
            </summary>
        </member>
        <member name="P:ViDi2.IBlueToolParameters.ShowRectangularFeatures">
            <summary>
            Whether the training UI should show rectangular feature graphics or elliptical
            <para/>True : Show Rectangular Feature Graphic
            <para/>False : Show Round Feature Graphic
            </summary>
        </member>
        <member name="T:ViDi2.RedMode">
            <summary>
            Specifies the modes of the red tool
            </summary>
        </member>
        <member name="T:ViDi2.RedCapacity">
            <summary>
            Selects the capacity of a red tool (unsupervised only)
            </summary>
        </member>
        <member name="T:ViDi2.IRedToolParameters">
            <summary>
            Represents the tool-parameters for the runtime red tool
            </summary>
        </member>
        <member name="P:ViDi2.IRedToolParameters.Mode">
            <summary>
            Gets the red tool mode(Focused mode)
            </summary>
        </member>
        <member name="P:ViDi2.IRedToolParameters.Exclusive">
            <summary>
            Gets whether the red tool operates in exclusive mode (supervised and Preview mode only)
            </summary>
        </member>
        <member name="P:ViDi2.IRedToolParameters.Capacity">
            <summary>
            Gets the red tool capacity (unsupervised only)
            </summary>
        </member>
        <member name="P:ViDi2.IRedToolParameters.Threshold">
            <summary>
            Gets or sets the upper and lower threshold
            </summary>
        </member>
        <member name="P:ViDi2.IRedToolParameters.SimpleRegions">
            <summary>
            Gets or sets whether extracted regions are simple, i.e. do not contain any holes 
            </summary>
        </member>
        <member name="P:ViDi2.IRedToolParameters.SamplingIterations">
            <summary>
            Gets or sets the number of sampling iterations during processing
            <para/>(Between 1 and 10)
            </summary>
        </member>
        <member name="P:ViDi2.IRedToolParameters.RegionFilter">
            <summary>
            Gets or sets the region filter
            </summary>
        </member>
        <member name="P:ViDi2.IRedToolParameters.AutoThresholdMode">
            <summary>
            Gets or sets the Auto threshold mode
            <para/>(Warning) Works when "AutoThresholdOn" is set true.
            <para/>Views, UntrainedViews, Regions, UntrainedRegions
            </summary>
        </member>
        <member name="P:ViDi2.IRedToolParameters.AutoThresholdOn">
            <summary>
            Gets or sets the Auto threshold on
            </summary>
        </member>
        <member name="T:ViDi2.IGreenToolParameters">
            <summary>
            Represents the tool-parameters for the runtime green tool
            </summary>
        </member>
        <member name="P:ViDi2.IGreenToolParameters.Threshold">
            <summary>
            Gets or sets the classification threshold
            <para/>(Between 0 and 1)
            </summary>
        </member>
        <member name="T:ViDi2.ITrainingWorkspaceManager">
            <summary>
            Describes a WorkspaceManager that understands properties
            relevant only to training workspaces, such as whether or
            not a training workspace has an autosave.
            </summary>
        </member>
        <member name="M:ViDi2.ITrainingWorkspaceManager.HasAutoSave(System.String)">
            <returns>
            True if at least one autosave exists for the given workspace
            managed by this WorkspaceManager.
            </returns>
        </member>
        <member name="M:ViDi2.ITrainingWorkspaceManager.CutWorkspace(System.String,System.String)">
            <summary>
            Makes a copy of the given workspace. The original workspace
            is deleted.
            </summary>
            <param name="workspaceID"> The unique identifier of the workspace to copy. </param>
            <param name="copiedWorkspaceID"> The unique identifier of the copied workspace. </param>
        </member>
        <member name="T:ViDi2.IVersion">
            <summary>
            Represents a version number
            </summary>
        </member>
        <member name="P:ViDi2.IVersion.Major">
            <summary>
            Gets the major release number
            </summary>
        </member>
        <member name="P:ViDi2.IVersion.BrandMajor">
            <summary>
            Gets the brand major release number
            </summary>
        </member>
        <member name="P:ViDi2.IVersion.Minor">
            <summary>
            Gets the minor release number
            </summary>
        </member>
        <member name="P:ViDi2.IVersion.Revision">
            <summary>
            Gets the revision number
            </summary>
        </member>
        <member name="P:ViDi2.IVersion.Build">
            <summary>
            Gets the build number
            </summary>
        </member>
        <member name="P:ViDi2.IVersion.Type">
            <summary>
            Gets the build type
            </summary>
        </member>
        <member name="T:ViDi2.ViewError">
            <summary>
            Error types for view processing
            </summary>
        </member>
        <member name="F:ViDi2.ViewError.None">
            <summary>
            No error occurred
            </summary>
        </member>
        <member name="F:ViDi2.ViewError.ErrorInProcessing">
            <summary>
            Error occurred during the processing stage
            </summary>
        </member>
        <member name="F:ViDi2.ViewError.ErrorInPostProcessing">
            <summary>
            Error occurred during the post-processing stage
            </summary>
        </member>
        <member name="T:ViDi2.IView">
            <summary>
            Represents a view (ROI) holding the results from the analysis
            </summary>
        </member>
        <member name="P:ViDi2.IView.Parent">
            <summary>
            Get's the views parent marking
            </summary>
        </member>
        <member name="P:ViDi2.IView.HasMask">
            <summary>
            Indicate whether the view has a mask
            </summary>
        </member>
        <member name="P:ViDi2.IView.Mask">
            <summary>
            Gets the view's mask
            </summary>
        </member>
        <member name="P:ViDi2.IView.RefPose">
            <summary>
            Get's the reference pose with respect to which this view was defined
            </summary>
        </member>
        <member name="P:ViDi2.IView.Pose">
            <summary>
            Gets the pose of the region as a transformation matrix
            </summary>
        </member>
        <member name="P:ViDi2.IView.Size">
            <summary>
            Gets the size of the view in pixels
            <para/> Width, Height
            </summary>
        </member>
        <member name="P:ViDi2.IView.Group">
            <summary>
            Gets the name of the group this view belongs to
            </summary>
        </member>
        <member name="P:ViDi2.IView.InvalidMessage">
            <summary>
            Holds a message why the view is invalid and cannot be trained
            </summary>
        </member>
        <member name="P:ViDi2.IView.IsLabeled">
            <summary>
            Gets whether the view has been labeled. If true, the view can be casted to an <see cref="T:ViDi2.ILabeledView"/>
            </summary>
        </member>
        <member name="P:ViDi2.IView.Bookmark">
            <summary>
            Gets the bookmark of the view
            </summary>
        </member>
        <member name="P:ViDi2.IView.Memo">
            <summary>
            Gets the memo of the view
            </summary>
        </member>
        <member name="T:ViDi2.ILabeledView">
            <summary>
            Represents a labeled view
            </summary>
        </member>
        <member name="P:ViDi2.ILabeledView.Train">
            <summary>
            Indicates whether the view is used for training
            </summary>
        </member>
        <member name="P:ViDi2.ILabeledView.Validation">
            <summary>
            Indicates whether the view is used for training
            </summary>
        </member>
        <member name="P:ViDi2.ILabeledView.Manual">
            <summary>
            Indicates whether the view's training flag is set manually
            </summary>
        </member>
        <member name="P:ViDi2.ILabeledView.LabelChecking">
            <summary>
            True if the view is checking label quality
            </summary>
        </member>
        <member name="T:ViDi2.IFeature">
            <summary>
            Represents a feature for the blue tool
            </summary>
        </member>
        <member name="P:ViDi2.IFeature.Name">
            <summary>
            Gets the feature name
            </summary>
        </member>
        <member name="P:ViDi2.IFeature.Score">
            <summary>
            Gets the feature score
            </summary>
        </member>
        <member name="P:ViDi2.IFeature.Position">
            <summary>
            Gets the feature position
            </summary>
        </member>
        <member name="P:ViDi2.IFeature.Angle">
            <summary>
            Gets the feature Angle
            <para/>Returns radian value
            <para/>Multiply by 180/PI to get degree value(º) like the below example.
            <para/>
            <para/>[Example] 
            <para/>If Angle value = 1.57079632... 
            <para/>Angle * (180/Math.PI) => 90 (º)
            </summary>
        </member>
        <member name="P:ViDi2.IFeature.Size">
            <summary>
            Gets the feature size
            </summary>
        </member>
        <member name="P:ViDi2.IFeature.Covers">
            <summary>
            Gets the feature covered by this feature (labeled &lt;-&gt; unlabeled)
            </summary>
        </member>
        <member name="P:ViDi2.IFeature.IsSelected">
            <summary>
            Gets whether the feature was selected by an axis-filter
            </summary>
        </member>
        <member name="T:ViDi2.IBlueView">
            <summary>
            Represents a view for a blue tool
            </summary>
        </member>
        <member name="P:ViDi2.IBlueView.OrientedFeatures">
            <summary>
            Gets whether the features are oriented
            </summary>
        </member>
        <member name="P:ViDi2.IBlueView.ScaledFeatures">
            <summary>
            Gets whether the features are scaled
            </summary>
        </member>
        <member name="P:ViDi2.IBlueView.AspectRatioFeatures">
            <summary>
            Gets whether the features can have aspect-ratio's other than one
            </summary>
        </member>
        <member name="P:ViDi2.IBlueView.ShowFeatureChiclets">
            <summary>
            Whether the training UI should show or hide the information rectangles about feature ID and match state
            </summary>
        </member>
        <member name="P:ViDi2.IBlueView.ShowRectangularFeatures">
            <summary>
            Whether the training UI should show rectangular feature graphics or elliptical
            </summary>
        </member>
        <member name="P:ViDi2.IBlueView.Features">
            <summary>
            Gets the list of features
            </summary>
        </member>
        <member name="P:ViDi2.IBlueView.Matches">
            <summary>
            Gets the list of matches
            </summary>
        </member>
        <member name="T:ViDi2.IBlueLabeledView">
            <summary>
            Represent a labeled view for a blue tool
            </summary>
        </member>
        <member name="P:ViDi2.IBlueLabeledView.LabeledFeatures">
            <summary>
            Gets the list of labeled features
            </summary>
        </member>
        <member name="P:ViDi2.IBlueLabeledView.LabeledMatches">
            <summary>
            Gets the list of labeled matches
            </summary>
        </member>
        <member name="P:ViDi2.IBlueLabeledView.FeatureMetrics">
            <summary>
            Gets an XmlElement containing classification performances with respect 
            to single feature classes as well as overall
            </summary>
        </member>
        <member name="T:ViDi2.IRegion">
            <summary>
            Represents a region for the red tool
            </summary>
        </member>
        <member name="P:ViDi2.IRegion.Name">
            <summary>
            Gets the class name 
            </summary>
        </member>
        <member name="P:ViDi2.IRegion.Color">
            <summary>
            Gets the region's associated color or null if none is defined
            <para/>Returns a hex color code including # character(ex : #F15854)
            </summary>
        </member>
        <member name="P:ViDi2.IRegion.Score">
            <summary>
            Gets the score for this region
            </summary>
        </member>
        <member name="P:ViDi2.IRegion.Area">
            <summary>
            Gets the region's area
            </summary>
        </member>
        <member name="P:ViDi2.IRegion.Perimeter">
            <summary>
            Gets the region's perimeter
            </summary>
        </member>
        <member name="P:ViDi2.IRegion.Compactness">
            <summary>
            Gets the region's compactness (max 1.0 for a circle)
            </summary>
        </member>
        <member name="P:ViDi2.IRegion.Coverage">
            <summary>
            Gets the coverage of this labeled/unlabeled region by other unlabeled/labeled regions
            </summary>
        </member>
        <member name="P:ViDi2.IRegion.Width">
            <summary>
            Gets the region's width
            </summary>
        </member>
        <member name="P:ViDi2.IRegion.Height">
            <summary>
            Gets the region's height
            </summary>
        </member>
        <member name="P:ViDi2.IRegion.Center">
            <summary>
            Gets the region's center (center of gravity)
            </summary>
        </member>
        <member name="P:ViDi2.IRegion.Outer">
            <summary>
            Represents the list of points for the outer contour
            </summary>
        </member>
        <member name="P:ViDi2.IRegion.Inners">
            <summary>
            Represents the list of list of points for the inner contours
            </summary>
        </member>
        <member name="P:ViDi2.IRegion.IsSelected">
            <summary>
            Gets whether the region was selected by an axis-filter
            </summary>
        </member>
        <member name="P:ViDi2.IRegion.Covers">
            <summary>
            Gets the list of regions covered by this region (labeled &lt;-&gt; unlabeled)
            </summary>
        </member>
        <member name="T:ViDi2.IMap">
            <summary>
            Represents a map
            </summary>
        </member>
        <member name="P:ViDi2.IMap.Name">
            <summary>
            Gets the name of the map
            </summary>
        </member>
        <member name="P:ViDi2.IMap.Data">
            <summary>
            Gets the map as a 16-bit image
            </summary>
        </member>
        <member name="P:ViDi2.IMap.Scale">
            <summary>
            Gets the factor used to scale the map into the 16-bit value range, i.e. 0 - 0xffff
            </summary>
        </member>
        <member name="P:ViDi2.IMap.Color">
            <summary>
            Gets the color associated to this map
            </summary>
        </member>
        <member name="T:ViDi2.IRedView">
            <summary>
            Represents a view for a red tool
            </summary>
        </member>
        <member name="P:ViDi2.IRedView.HasHeatMap">
            <summary>
            Checks whether the view has a heat-map
            </summary>
        </member>
        <member name="P:ViDi2.IRedView.HeatMap">
            <summary>
            Gets the view's heat-map 
            </summary>
        </member>
        <member name="P:ViDi2.IRedView.ScoreMaps">
            <summary>
            Gets the score-map for the given class name
            </summary>
            <returns>score-map as 16-bit grayscale image</returns>
        </member>
        <member name="P:ViDi2.IRedView.Regions">
            <summary>
            Gets the list of found regions
            </summary>
        </member>
        <member name="P:ViDi2.IRedView.Score">
            <summary>
            Gets the maximal score
            </summary>
        </member>
        <member name="P:ViDi2.IRedView.FilteredScore">
            <summary>
            Gets the maximal score of being filtered
            </summary>
        </member>
        <member name="P:ViDi2.IRedView.Scores">
            <summary>
            Gets the view scores per class
            </summary>
        </member>
        <member name="P:ViDi2.IRedView.Threshold">
            <summary>
            Gets the view's detection thresholds
            </summary>
        </member>
        <member name="P:ViDi2.IRedView.Mode">
            <summary>
            Gets the mode of the tool for this view
            </summary>
        </member>
        <member name="P:ViDi2.IRedView.Uncertainty">
            <summary>
            Gets the view's prediction uncertainty (-1 if not computed)
            </summary>
        </member>
        <member name="P:ViDi2.IRedView.ALEncoded">
            <summary>
            Gets sets the view's encoding state of Auto Label
            </summary>
        </member>
        <member name="T:ViDi2.IRedLabeledView">
            <summary>
            Represent a labeled view for a red tool
            </summary>
        </member>
        <member name="P:ViDi2.IRedLabeledView.LabeledRegions">
            <summary>
            Gets the list of labeled regions; the view is 
            labeled negative if it has no labeled regions
            </summary>
        </member>
        <member name="P:ViDi2.IRedLabeledView.Background">
            <summary>
            Gets the view's background scores per class
            </summary>
        </member>
        <member name="P:ViDi2.IRedLabeledView.Metrics">
            <summary>
            Gets an XmlElement containing classification performances with respect 
            to single region classes as well as overall
            </summary>
        </member>
        <member name="P:ViDi2.IRedLabeledView.LabelCheckResults">
            <summary>
            Gets the label qualities by the patch unit
            </summary>
        </member>
        <member name="P:ViDi2.IRedLabeledView.LabelQuality">
            <summary>
            Gets the score that indicates how correctly labeled
            </summary>
        </member>
        <member name="T:ViDi2.ITag">
            <summary>
            Represents a tag of a green view
            </summary>
        </member>
        <member name="P:ViDi2.ITag.Name">
            <summary>
            Gets the tag's name
            </summary>
        </member>
        <member name="P:ViDi2.ITag.Color">
            <summary>
            Gets the tag's associated color or null if none is defined
            <para/>Returns a hex color code including # character(ex : #F15854)
            </summary>
        </member>
        <member name="P:ViDi2.ITag.Score">
            <summary>
            Gets the tag's score
            </summary>
        </member>
        <member name="T:ViDi2.IGreenView">
            <summary>
            Represents a view for a green tool
            </summary>
        </member>
        <member name="P:ViDi2.IGreenView.Exclusive">
            <summary>
            True if the green tool operates in exclusive mode, i.e.
            the sum of all class probabilities is equal to one
            </summary>
        </member>
        <member name="P:ViDi2.IGreenView.Tags">
            <summary>
            Gets the collection of tags
            <para/>Less than 1% of tags are not returned
            <para/>To get information about all tags, use the IGreenTool's KnownTags.
            </summary>
        </member>
        <member name="P:ViDi2.IGreenView.BestTag">
            <summary>
            Gets the tag with the highest score
            </summary>
        </member>
        <member name="P:ViDi2.IGreenView.Threshold">
            <summary>
            Gets the view's classification threshold
            </summary>
        </member>
        <member name="P:ViDi2.IGreenView.Uncertainty">
            <summary>
            Gets the view's prediction uncertainty (-1 if not computed)
            </summary>
        </member>
        <member name="P:ViDi2.IGreenView.HeatMap">
            <summary>
            Gets the Heat Maps
            </summary>
            <returns>score-map as 16-bit grayscale image</returns>
        </member>
        <member name="T:ViDi2.IGreenLabeledView">
            <summary>
            Represent a labeled view for a green tool
            </summary>
        </member>
        <member name="P:ViDi2.IGreenLabeledView.LabeledTags">
            <summary>
            Gets the list of tags this view is labeled
            </summary>
        </member>
        <member name="P:ViDi2.IGreenLabeledView.Unknown">
            <summary>
            Gets if the view label is unknown, i.e. not part of the current learned tags
            </summary>
        </member>
        <member name="P:ViDi2.IGreenLabeledView.SimilarityReference">
            <summary>
            Gets if the view is a similarity references
            </summary>
        </member>
        <member name="P:ViDi2.IGreenLabeledView.LabelQuality">
            <summary>
            Gets the score that indicates how correctly labeled
            </summary>
        </member>
        <member name="T:ViDi2.ILabelCheckResult">
            <summary>
            If Label Checker was done, gets the result of each patch in Red HDM
            </summary>
        </member>
        <member name="P:ViDi2.ILabelCheckResult.LabelQuality">
            <summary>
            Gets the label quality of the patch
            </summary>
        </member>
        <member name="P:ViDi2.ILabelCheckResult.X">
            <summary>
            Gets the the x-axis value on the left side of the patch
            </summary>
        </member>
        <member name="P:ViDi2.ILabelCheckResult.Y">
            <summary>
            Gets the the y-axis value above the patch
            </summary>
        </member>
        <member name="P:ViDi2.ILabelCheckResult.Width">
            <summary>
            Gets the width of the patch
            </summary>
        </member>
        <member name="P:ViDi2.ILabelCheckResult.Height">
            <summary>
            Gets the height of the patch
            </summary>
        </member>
        <member name="T:ViDi2.IWorkspace">
            <summary>
            Represent a runtime workspace
            </summary>
        </member>
        <member name="P:ViDi2.IWorkspace.Control">
            <summary>
            Gets the parent control
            </summary>
        </member>
        <member name="P:ViDi2.IWorkspace.Name">
            <summary>
            Gets the name of the workspace
            </summary>
        </member>
        <member name="P:ViDi2.IWorkspace.UniqueName">
            <summary>
            Gets the name assigned to this workspace
            by the application.
            </summary>
            <remarks>
            This name should be unique in the context of the application
            and should not change. If the application is local, this could
            be the name of the workspace's folder in the workspace directory.
            If the application is remote, this could be a non human-readable ID, like a GUID.
            </remarks>
        </member>
        <member name="P:ViDi2.IWorkspace.DisplayName">
            <summary>
            Gets the human-readable name assigned to this workspace
            by its owner.
            </summary>
            <remarks>
            This property is meant for displaying the workspace in a GUI.
            It may or may not be unique, depending on how the application
            manages workspaces, but it should always be human-readable.
            </remarks>
        </member>
        <member name="P:ViDi2.IWorkspace.ObjectId">
            <summary>
            Gets the volatile UUID that generated when workspace object is created.
            </summary>
            <remarks>
            This property is used to identify individual workspace object even they have the same UUID.
            </remarks>
        </member>
        <member name="P:ViDi2.IWorkspace.Uuid">
            <summary>
            Gets the UUID assigned to this workspace
            by the C++ library.
            </summary>
            <remarks>
            If a unique identifier
            is needed without going through the C++ library,
            consider using <see cref="P:ViDi2.IWorkspace.UniqueName"/>.
            </remarks>
        </member>
        <member name="P:ViDi2.IWorkspace.Parameters">
            <summary>
            Gets the workspace parameters
            </summary>
        </member>
        <member name="P:ViDi2.IWorkspace.Streams">
            <summary>
            Gets the list of streams
            </summary>
        </member>
        <member name="P:ViDi2.IWorkspace.LastModified">
            <summary>
            Gets the date when last modified
            </summary>
        </member>
        <member name="P:ViDi2.IWorkspace.IsOpen">
            <summary>
            Gets a value indicating whether the workspace is open or closed
            </summary>
        </member>
        <member name="T:ViDi2.IWorkspaceManager">
            <summary>
            Represents a manager which determines the storage location of workspaces on the filesystem
            </summary>
        </member>
        <member name="P:ViDi2.IWorkspaceManager.Workspaces">
            <summary>
            Gets the dictionary which maps workspaces names to filesystem paths
            </summary>
        </member>
        <member name="P:ViDi2.IWorkspaceManager.ShouldCalculateWorkspaceSize">
            <summary>
            Whether or not the workspace manager should perform a potentially
            expensive calculation to determine the size of a workspace
            when it refreshes the info for that workspace.
            </summary>
        </member>
        <member name="M:ViDi2.IWorkspaceManager.GetWorkspaceSize(System.String,System.String)">
            <summary>
            Gets the size of the workspace. If the workspace has been modified since
            the last time the size was retrieved, the size will be recalculated.
            </summary>
            <param name="workspaceName"> The name of the workspace to find the size of. </param>
            <param name="lastModifiedAt"> The time at which the workspace was last modified. </param>
            <returns> The size of the workspace, in bytes, or a negative number if the size was not calculated. </returns>
        </member>
        <member name="M:ViDi2.IWorkspaceManager.NewWorkspacePath(System.String)">
            <summary>
            Return a new directory location for a given workspace
            </summary>
            <param name="workspace">the new workspace name</param>
            <returns>file system directory</returns>
        </member>
        <member name="M:ViDi2.IWorkspaceManager.DeleteWorkspace(System.String)">
            <summary>
            Deletes the given workspace and all associated files (streams, tools,
            autosaves, images, etc.), assuming the workspace is known to this WorkspaceManager.
            </summary>
            <param name="workspaceName"> The name of the workspace to delete. </param>
        </member>
        <member name="T:ViDi2.DeploymentTarget">
            <summary>
            Specifies the deployment target of a workspace
            </summary>
        </member>
        <member name="P:ViDi2.IWorkspaceParameters.Description">
            <summary>
            Gets the description of the runtime workspace
            </summary>
        </member>
        <member name="P:ViDi2.IWorkspaceParameters.DeploymentTarget">
            <summary>
            Gets the deployment target of the runtime workspace
            </summary>
        </member>
        <member name="P:ViDi2.Matrix.Identity">
            <summary>Identity</summary>
        </member>
        <member name="P:ViDi2.Matrix.IsIdentity">
            <summary>
            Tests whether or not a given transform is an identity transform
            </summary>
        </member>
        <member name="M:ViDi2.Matrix.Rotate(System.Double)">
            <summary>
            Rotates this matrix about the origin
            </summary>
            <param name='angle'>The angle to rotate specifed in degrees</param>
        </member>
        <member name="M:ViDi2.Matrix.RotatePrepend(System.Double)">
            <summary>
            Prepends a rotation about the origin to "this"
            </summary>
            <param name='angle'>The angle to rotate specifed in degrees</param>
        </member>
        <member name="M:ViDi2.Matrix.RotateAt(System.Double,System.Double,System.Double)">
            <summary>
            Rotates this matrix about the given point
            </summary>
            <param name='angle'>The angle to rotate specifed in degrees</param>
            <param name='centerX'>The centerX of rotation</param>
            <param name='centerY'>The centerY of rotation</param>
        </member>
        <member name="M:ViDi2.Matrix.RotateAtPrepend(System.Double,System.Double,System.Double)">
            <summary>
            Prepends a rotation about the given point to "this"
            </summary>
            <param name='angle'>The angle to rotate specifed in degrees</param>
            <param name='centerX'>The centerX of rotation</param>
            <param name='centerY'>The centerY of rotation</param>
        </member>
        <member name="M:ViDi2.Matrix.Scale(System.Double,System.Double)">
            <summary>
            Scales this matrix around the origin
            </summary>
            <param name='scaleX'>The scale factor in the x dimension</param>
            <param name='scaleY'>The scale factor in the y dimension</param>
        </member>
        <member name="M:ViDi2.Matrix.ScaleAt(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Scales this matrix around the specified point
            </summary>
            <param name='scaleX'>The scale factor in the x dimension</param>
            <param name='scaleY'>The scale factor in the y dimension</param>
            <param name='centerX'>The x-coordinate of the point around which the scaling is performed</param>
            <param name='centerY'>The y-coordinate of the point around which the scaling is performed</param>
        </member>
        <member name="M:ViDi2.Matrix.ScalePrepend(System.Double,System.Double)">
            <summary>
            Prepend the scales to this matrix
            </summary>
            <param name='scaleX'>The scale factor in the x dimension</param>
            <param name='scaleY'>The scale factor in the y dimension</param>
        </member>
        <member name="M:ViDi2.Matrix.ScaleAtPrepend(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Prepend the scales to this matrix around the specified point
            </summary>
            <param name='scaleX'>The scale factor in the x dimension</param>
            <param name='scaleY'>The scale factor in the y dimension</param>
            <param name='centerX'>The x-coordinate of the point around which the scaling is performed</param>
            <param name='centerY'>The y-coordinate of the point around which the scaling is performed</param>
        </member>
        <member name="M:ViDi2.Matrix.Translate(System.Double,System.Double)">
            <summary>
            Translates this matrix
            </summary>
            <param name='offsetX'>The offset in the x dimension</param>
            <param name='offsetY'>The offset in the y dimension</param>
        </member>
        <member name="M:ViDi2.Matrix.Transform(ViDi2.Point)">
            <summary>
            Transform - returns the result of transforming the point by this matrix
            </summary>
            <returns>
            The transformed point
            </returns>
            <param name="point"> The Point to transform </param>
        </member>
        <member name="M:ViDi2.Matrix.Transform(ViDi2.Vector)">
            <summary>
            Transform - returns the result of transforming the vector by this matrix.
            </summary>
            <remarks>
            The difference between this and transforming a Point is that when transforming a
            Vector, the translation is not applied.
            </remarks>
            <returns>
            The transformed vector
            </returns>
            <param name="vec"> The Vector to transform </param>
        </member>
        <member name="M:ViDi2.Matrix.Transform(ViDi2.Point[])">
            <summary>
            Transform - Transforms each point in the array by this matrix
            </summary>
            <param name="points"> The Point array to transform </param>
        </member>
        <member name="P:ViDi2.Matrix.Determinant">
            <summary>
            The determinant of this matrix
            </summary>
        </member>
        <member name="P:ViDi2.Matrix.HasInverse">
            <summary>
            HasInverse Property - returns true if this matrix is invertable, false otherwise.
            </summary>
        </member>
        <member name="M:ViDi2.Matrix.Invert">
            <summary>
            Replaces matrix with the inverse of the transformation.  This will throw an InvalidOperationException
            if !HasInverse
            </summary>
            <exception cref="T:System.InvalidOperationException">
            This will throw an InvalidOperationException if the matrix is non-invertable
            </exception>
        </member>
        <member name="M:ViDi2.Matrix.ToString">
            <summary>
            Serializes the Matrix to a string, ignoring any culture-specific number formatting.
            </summary>
        </member>
        <member name="M:ViDi2.Matrix.Parse(System.String)">
            <summary>
            Parses a string returned by <see cref="M:ViDi2.Matrix.ToString"/> back into a valid Matrix.
            </summary>
            <param name="str">A string representing a Matrix serialized via <see cref="M:ViDi2.Matrix.ToString"/>.</param>
            <returns>The de-serialized Matrix. </returns>
        </member>
        <member name="M:ViDi2.Matrix.op_Equality(ViDi2.Matrix,ViDi2.Matrix)">
            <summary>
                Compares two Matrix instances for exact equality.
            </summary>
            <param name='matrix1'>The first Matrix to compare</param>
            <param name='matrix2'>The second Matrix to compare</param>
            <returns>
                bool - true if the two Matrix instances are exactly equal, false otherwise
            </returns>
        </member>
        <member name="M:ViDi2.Matrix.op_Inequality(ViDi2.Matrix,ViDi2.Matrix)">
            <summary>
                Compares two Matrix instances for inequality.
            </summary>
            <param name='matrix1'>The first Matrix to compare</param>
            <param name='matrix2'>The second Matrix to compare</param>
            <returns>
                bool - true if the two Matrix instances are not exactly equal, false otherwise
            </returns>
        </member>
        <member name="M:ViDi2.Matrix.op_Multiply(ViDi2.Matrix,ViDi2.Matrix)">
            <summary>
                Multiplies two transformations matrices: matrix1 * matrix2
            </summary>
            <param name='matrix1'>The first Matrix to multiply</param>
            <param name='matrix2'>The second Matrix to multiply</param>
            <returns>
                Matrix - the matrix resulting from the multiplication
            </returns>
        </member>
        <member name="T:ViDi2.NameWrapper">
            <summary>
            Name wrapper.
            This is used a attribute to any LibraryAccess method calls
            </summary>
        </member>
        <member name="P:ViDi2.NameWrapper.Name">
            <summary>
            name of the workspace
            </summary>
        </member>
        <member name="M:ViDi2.NameWrapper.ToString">
            <summary>
            A string representation of this object.
            </summary>
        </member>
        <member name="T:ViDi2.Point">
            <summary>
                Represents an x- and y-coordinate pair in two-dimensional space.
            </summary>
        </member>
        <member name="M:ViDi2.Point.#ctor(System.Double,System.Double)">
            <summary>
            Constructor which accepts the X and Y values
            </summary>
            <param name="x">The value for the X coordinate of the new Point</param>
            <param name="y">The value for the Y coordinate of the new Point</param>
        </member>
        <member name="P:ViDi2.Point.Y">
            <summary>
                Gets or sets the ViDi2.Point.X-coordinate value of this ViDi2.Point structure.
            </summary>
            <returns>
                The ViDi2.Point.Y-coordinate value of this ViDi2.Point structure.
                The default value is 0.
            </returns>
        </member>
        <member name="P:ViDi2.Point.X">
            <summary>
                Gets or sets the ViDi2.Point.X-coordinate value of this ViDi2.Point structure.
            </summary>
            <returns>
                The ViDi2.Point.X-coordinate value of this ViDi2.Point structure.
                The default value is 0.
            </returns>
        </member>
        <member name="M:ViDi2.Point.Equals(ViDi2.Point,ViDi2.Point)">
            <summary>
                Compares two ViDi2.Point structures for equality.
            </summary>
            <param name="point1"> The first point to compare. </param>
            <param name="point2"> The second point to compare. </param>
            <returns>
                true if point1 and point2 contain the same ViDi2.Point.X and ViDi2.Point.Y
                values; otherwise, false.
            </returns>
        </member>
        <member name="M:ViDi2.Point.Parse(System.String)">
            <summary>
                Constructs a ViDi2.Point from the specified System.String.
            </summary>
            <param name="source"> A string representation of the point </param>
            <return>
                The equivalent ViDi2.Point structure.
            </return>
            <exception cref="T:System.FormatException">
                source is not composed of two comma- or space-delimited double values.
            </exception>
            <exception cref="T:System.InvalidOperationException">
                source does not contain two numbers.-or-source contains too many delimiters.
            </exception>
        </member>
        <member name="M:ViDi2.Point.ToString">
            <summary>
            Creates a string representation of this object based on the current culture.
            </summary>
            <returns>
            A string representation of this object.
            </returns>
        </member>
        <member name="M:ViDi2.Point.ToString(System.String,System.IFormatProvider)">
            <summary>
                Creates a System.String representation of this ViDi2.Point.
            </summary>
            <param name="provider"> Culture-specific formatting information.. </param>
            <returns>
                A System.String containing the ViDi2.Point.X and ViDi2.Point.Y
                values of this ViDi2.Point structure.
            </returns>
        </member>
        <member name="M:ViDi2.Point.Offset(System.Double,System.Double)">
            <summary>
                Offsets a point's ViDi2.Point.X and ViDi2.Point.Y coordinates
                by the specified amounts.
            </summary>
            <param name="offsetX"> The offset in the x dimension </param>
            <param name="offsetY"> The offset in the y dimension </param>
        </member>
        <member name="M:ViDi2.Point.op_Addition(ViDi2.Point,ViDi2.Vector)">
            <summary>
                Translates the specified ViDi2.Point by the specified ViDi2.Vector
                and returns the result
            </summary>
            <param name="point"> The Point to translate </param>
            <param name="vector"> The amount by which to translate point </param>
            <returns>
                The result of translating the specified point by the specified vector.
            </returns>
        </member>
        <member name="M:ViDi2.Point.op_Subtraction(ViDi2.Point,ViDi2.Vector)">
            <summary>
                Subtracts the specified ViDi2.Vector from the specified ViDi2.Point
                and returns the resulting ViDi2.Point.
            </summary>
            <param name="point"> The Point from which vector is subtracted </param>
            <param name="vector"> The Vector to subtract from point </param>
            <returns>
                Vector - The result of the subtraction
            </returns>
        </member>
        <member name="M:ViDi2.Point.op_Subtraction(ViDi2.Point,ViDi2.Point)">
            <summary>
                Subtracts the specified ViDi2.Point from another specified ViDi2.Point
                and returns the difference as a ViDi2.Vector.
            </summary>
            <param name="point1"> The Point from which point2 is subtracted </param>
            <param name="point2"> The Point subtracted from point1 </param>
            <returns>
                Vector - The difference between point1 and point2
            </returns>
        </member>
        <member name="M:ViDi2.Point.op_Equality(ViDi2.Point,ViDi2.Point)">
            <summary>
                Compares two ViDi2.Point structures for equality.
            </summary>
            <param name="point1"> The first ViDi2.Point structure to compare.</param>
            <param name="point2"> The second ViDi2.Point structure to compare. </param>
            <returns>
                true if both the ViDi2.Point.X and ViDi2.Point.Y coordinates
                of point1 and point2 are equal; otherwise, false.
            </returns>
        </member>
        <member name="M:ViDi2.Point.op_Inequality(ViDi2.Point,ViDi2.Point)">
            <summary>
                Compares two ViDi2.Point structures for inequality.
            </summary>
            <param name="point1"> The first ViDi2.Point structure to compare.</param>
            <param name="point2"> The second ViDi2.Point structure to compare. </param>
            <returns>
                true if point1 and point2 have different ViDi2.Point.X or ViDi2.Point.Y
                coordinates; false if point1 and point2 have the same ViDi2.Point.X
                and ViDi2.Point.Y coordinates.
            </returns>
        </member>
        <member name="T:ViDi2.ResourceManagerCache">
            <summary>
             A cache of ResourceManagers associated with a strongly typed auto-generated Resources class.
             Intended to aid in allowing attributes to use localized strings by specifying the resource
             class types and the corresponding key to use for a localized string.
            </summary>
            <remarks>
             Intended usage:
             <code><![CDATA[
               [MyCustomAttribute(typeof(Resources), nameof(Resources.SomeStringKey))]
               ...
               public MyCustomAttribute(Type resourceType, string resourceKey)
               {
                 DisplayName = ResourceManagerCache.Instance.LookupLocalizedString(resourceType, resourceKey);
               }
             ]]></code>
            </remarks>
        </member>
        <member name="F:ViDi2.ResourceManagerCache.Instance">
            <summary> Singleton instance of the <see cref="T:ViDi2.ResourceManagerCache"/> </summary>
        </member>
        <member name="M:ViDi2.ResourceManagerCache.#ctor">
            <summary>
             Constructor that prevents a default instance of this class from being created.
            </summary>
        </member>
        <member name="M:ViDi2.ResourceManagerCache.LookupManager(System.Type)">
            <summary>
             Finds the ResourceManager associated with the given strongly-type Resources class.
            </summary>
            <param name="type"> The type that is auto-generated from a resx file and contains a
             ResourceManager class. </param>
        </member>
        <member name="M:ViDi2.ResourceManagerCache.LookupLocalizedString(System.Type,System.String)">
            <summary> Looks up the localized string for the given type + key combination. </summary>
            <param name="type"> The auto-generated .NET resource class that contains the localized string
             with a key of <paramref name="key"/> </param>
            <param name="key"> The key associated with the localized string that is contained in the
             auto-generated resource class given by <paramref name="type"/>. </param>
            <returns> The localized string on the given type with the given key. </returns>
        </member>
        <member name="T:ViDi2.Runtime.IStream">
            <summary>
            Represents a processing stream
            </summary>
        </member>
        <member name="P:ViDi2.Runtime.IStream.Tools">
            <summary>
            Gets the list of tools (only root children) of this stream
            </summary>
        </member>
        <member name="P:ViDi2.Runtime.IStream.Workspace">
            <summary>
            Gets the parent workspace
            </summary>
        </member>
        <member name="P:ViDi2.Runtime.IStream.SampleTitles">
            <summary>
            Gets the stream's sample title list
            </summary>
        </member>
        <member name="T:ViDi2.Runtime.ITool">
            <summary>
            Represents a runtime tool
            </summary>
        </member>
        <member name="P:ViDi2.Runtime.ITool.Stream">
            <summary>
            Gets the tool's parent stream
            </summary>
        </member>
        <member name="P:ViDi2.Runtime.ITool.Children">
            <summary>
            Gets the list of direct child tools
            </summary>
        </member>
        <member name="P:ViDi2.Runtime.ITool.Parent">
            <summary>
            Gets the tool parent or null if it has none
            </summary>
        </member>
        <member name="M:ViDi2.Runtime.ITool.OptimizeTensorRT(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Optimize the tool with TensorRT
            </summary>
            <param name="gpuIndex">Target GPU for which TensorRT will optimize the model</param>
            <param name="width">(Optional) optimized width (if not provided, training width is used)</param>
            <param name="height">(Optional) optimized height (if not provided, training height is used)</param>
            <param name="batch_size">(Optional) optimized batch size (if not provided, batch size 1 is used)</param>
        </member>
        <member name="T:ViDi2.Runtime.IBlueTool">
            <summary>
            Represents the runtime ViDi blue tool
            </summary>
        </member>
        <member name="T:ViDi2.Runtime.IRedTool">
            <summary>
            Represents the runtime ViDi red tool
            </summary>
        </member>
        <member name="P:ViDi2.Runtime.IRedTool.OptimizedTensorRT">
            <summary>
            <returns>true if TensorRT model is created</returns>
            </summary>
        </member>
        <member name="P:ViDi2.Runtime.IRedTool.OptimizeTarget">
            <summary>
            <returns>target device name of optimization</returns>
            </summary>
        </member>
        <member name="T:ViDi2.Runtime.IGreenTool">
            <summary>
            Represents the runtime ViDi green tool
            </summary>
        </member>
        <member name="P:ViDi2.Runtime.IGreenTool.OptimizedTensorRT">
            <summary>
            <returns>true if TensorRT model is created</returns>
            </summary>
        </member>
        <member name="P:ViDi2.Runtime.IGreenTool.OptimizeTarget">
            <summary>
            <returns>target device name of optimization</returns>
            </summary>
        </member>
        <member name="T:ViDi2.Runtime.IToolParametersHighDetail">
            <summary>
            common runtime parameters for the High-detail tool
            </summary>
        </member>
        <member name="T:ViDi2.Runtime.IGreenHighDetailParameters">
            <summary>
             runtime parameters for the green tool
            </summary>
        </member>
        <member name="P:ViDi2.Runtime.IGreenHighDetailParameters.ProbabilityThreshold">
            <summary>
            minimal score a view must have to be classified
            </summary>
        </member>
        <member name="P:ViDi2.Runtime.IGreenHighDetailParameters.BatchSize">
            <summary>
            TensorRT optimized model doesn't support this member because TensorRT model uses the batch size provided in optimization
            </summary>
        </member>
        <member name="T:ViDi2.Runtime.IRedHighDetailParameters">
            <summary>
             runtime parameters for the red tool
            </summary>
        </member>
        <member name="P:ViDi2.Runtime.IRedHighDetailParameters.Threshold">
            <summary>
            Gets or sets the upper and lower threshold
            </summary>
        </member>
        <member name="P:ViDi2.Runtime.IRedHighDetailParameters.SimpleRegions">
            <summary>
            Gets or sets whether extracted regions are simple, i.e. do not contain any holes 
            </summary>
        </member>
        <member name="P:ViDi2.Runtime.IRedHighDetailParameters.RegionFilter">
            <summary>
            Gets or sets the region filter
            </summary>
        </member>
        <member name="P:ViDi2.Runtime.IRedHighDetailParameters.OptimizedBatchSizeOn">
            <summary>
            Gets or sets the optimized batch size
            </summary>
        </member>
        <member name="P:ViDi2.Runtime.IRedHighDetailParameters.RegionSmoothing">
            <summary>
            Gets or sets the region smoothing
            </summary>
        </member>
        <member name="P:ViDi2.Runtime.IRedHighDetailParameters.MaxDownSamplingSize">
            <summary>
            Gets or sets the max down sampling size
            </summary>
        </member>
        <member name="P:ViDi2.Runtime.IRedHighDetailParameters.AutoThresholdMode">
            <summary>
            Gets or sets the auto threshold mode
            </summary>
        </member>
        <member name="P:ViDi2.Runtime.IRedHighDetailParameters.AutoThresholdOn">
            <summary>
            Gets or sets the Auto threshold on
            </summary>
        </member>
        <member name="P:ViDi2.Runtime.IRedHighDetailParameters.UsePatchcropPrediction">
            <summary>
            Gets or sets the patchcrop prediction mode
            </summary>
        </member>
        <member name="T:ViDi2.Runtime.IControl">
            <summary>
            Represents the base of the runtime interface
            </summary>
        </member>
        <member name="P:ViDi2.Runtime.IControl.Workspaces">
            <summary>
            Gets the list of workspaces
            </summary>
        </member>
        <member name="M:ViDi2.Runtime.IWorkspaceList.Add(System.String,System.String)">
            <summary>
            Adds a workspace from the filesystem
            </summary>
            <param name="name">name of the workspace</param>
            <param name="filepath">directory containing the workspace</param>
            <returns>
            a reference to the newly loaded workspace
            </returns>
        </member>
        <member name="M:ViDi2.Runtime.IWorkspaceList.Add(System.String,System.String,System.String)">
            <summary>
            Adds a workspace from the filesystem
            </summary>
            <param name="name">name of the workspace</param>
            <param name="filepath">directory containing the workspace</param>
            <param name="gpuHdm">GPU indices for each HDM tool in the workspace(indices are 0-based) "[stream name]/[tool name]/[index]/[stream name]/[tool name]/[index]..."</param>
            <returns>
            a reference to the newly loaded workspace
            </returns>
        </member>
        <member name="M:ViDi2.Runtime.IWorkspaceList.Add(System.String,System.IO.Stream)">
            <summary>
            Adds a workspace from a stream
            </summary>
            <param name="name">name of the workspace</param>
            <param name="stream">stream containing the workspace data</param>
            <returns>
            a reference to the newly loaded workspace
            </returns>
        </member>
        <member name="M:ViDi2.Runtime.IWorkspaceList.Remove(System.String)">
            <summary>
            Removes a workspace
            </summary>
            <param name="name">name of the workspace</param>
        </member>
        <member name="T:ViDi2.Runtime.IWorkspace">
            <summary>
            Represent a runtime workspace
            </summary>
        </member>
        <member name="P:ViDi2.Runtime.IWorkspace.Control">
            <summary>
            Gets the parent control
            </summary>
        </member>
        <member name="P:ViDi2.Runtime.IWorkspace.Streams">
            <summary>
            Gets the list of streams
            </summary>
        </member>
        <member name="M:ViDi2.Runtime.IWorkspace.Open">
            <summary>
            loads the workspace in memory
            </summary>
        </member>
        <member name="M:ViDi2.Runtime.IWorkspace.Close">
            <summary>
            unloads the workspace
            </summary>
        </member>
        <member name="M:ViDi2.Runtime.IWorkspace.Save(System.String)">
            <summary>
            saves the workspace
            </summary>
            <param name="path"></param>
        </member>
        <member name="T:ViDi2.Size">
            <summary>
            Size - A value type which defined a size in terms of non-negative width and height
            </summary>
        </member>
        <member name="M:ViDi2.Size.#ctor(System.Double,System.Double)">
            <summary>
            Constructor which sets the size's initial values.  Width and Height must be non-negative
            </summary>
            <param name="width"> double - The initial Width </param>
            <param name="height"> double - THe initial Height </param>
        </member>
        <member name="P:ViDi2.Size.Width">
            <summary>
                Gets or sets the ViDi2.Size.Width of this instance of ViDi2.Size.
            </summary>
            <returns>
                The ViDi2.Size.Width of this instance of ViDi2.Size. The default
                value is 0. The value cannot be negative.
            </returns>
            <exception cref="T:System.InvalidOperationException"> Cannot modify Width of an Empty Size </exception>
            <exception cref="T:System.ArgumentException"> Width cannot be negative </exception>
        </member>
        <member name="P:ViDi2.Size.Height">
            <summary>
                Gets or sets the ViDi2.Size.Height of this instance of ViDi2.Size.
            </summary>
            <returns>
                The ViDi2.Size.Height of this instance of ViDi2.Size. The default
                value is 0. The value cannot be negative.
            </returns>
            <exception cref="T:System.InvalidOperationException"> Cannot modify Height of an Empty Size </exception>
            <exception cref="T:System.ArgumentException"> Height cannot be negative </exception>
        </member>
        <member name="P:ViDi2.Size.IsEmpty">
            <summary>
                IsEmpty - this returns true if this size is the Empty size, but not necessarily (0,0)
            </summary>
        </member>
        <member name="P:ViDi2.Size.Empty">
            <summary>
                Empty - a static property which provides an Empty size.
            </summary>
        </member>
        <member name="M:ViDi2.Size.op_Equality(ViDi2.Size,ViDi2.Size)">
            <summary>
                Compares two instances of ViDi2.Size for equality.
            </summary>
            <paramref name="size1"> The first instance of ViDi2.Size to compare. </paramref>
            <paramref name="size2"> The second instance of ViDi2.Size to compare. </paramref>
            <returns>
                true if the two instances of ViDi2.Size are equal; otherwise false.
            </returns>
        </member>
        <member name="M:ViDi2.Size.op_Inequality(ViDi2.Size,ViDi2.Size)">
            <summary>
                Compares two instances of ViDi2.Size for inequality.
            </summary>
            <paramref name="size1"> The first instance of ViDi2.Size to compare. </paramref>
            <paramref name="size2"> The second instance of ViDi2.Size to compare. </paramref>
            <returns>
                true if the two instances of ViDi2.Size are not equal; otherwise false.
            </returns>
        </member>
        <member name="M:ViDi2.Size.ToString">
            <summary>
            Creates a string representation of this object based on the current culture.
            </summary>
            <returns>
            A string representation of this object.
            </returns>
        </member>
        <member name="M:ViDi2.Size.ToString(System.IFormatProvider)">
            <summary>
                Creates a System.String representation of this ViDi2.Point.
            </summary>
            <param name="provider"> Culture-specific formatting information.. </param>
            <returns>
                A System.String containing the ViDi2.Point.X and ViDi2.Point.Y
                values of this ViDi2.Point structure.
            </returns>
        </member>
        <member name="T:ViDi2.StreamName">
            <summary>
            holds the name of a stream.
            This is used a attribute to any LibraryAccess method calls
            </summary>
        </member>
        <member name="M:ViDi2.StreamName.op_Implicit(System.String)~ViDi2.StreamName">
            <summary>
            implicit conversion from string to StreamName
            </summary>
            <param name="name"></param>
        </member>
        <member name="T:ViDi2.TaskName">
            <summary>
            holds the name of a tool.
            This is used a attribute to any LibraryAccess method calls
            </summary>
        </member>
        <member name="M:ViDi2.TaskName.op_Implicit(System.String)~ViDi2.TaskName">
            <summary>
            implicit conversion from string to ToolName
            </summary>
            <param name="name"></param>
        </member>
        <member name="T:ViDi2.ToolName">
            <summary>
            holds the name of a tool.
            This is used a attribute to any LibraryAccess method calls
            </summary>
        </member>
        <member name="M:ViDi2.ToolName.op_Implicit(System.String)~ViDi2.ToolName">
            <summary>
            implicit conversion from string to ToolName
            </summary>
            <param name="name"></param>
        </member>
        <member name="T:ViDi2.ParameterType">
            <summary>
            Represents a structure holding type information about a parameter
            </summary>
        </member>
        <member name="P:ViDi2.ParameterType.Unit">
            <summary>
            Gets the parameter's unit as a string
            </summary>
        </member>
        <member name="P:ViDi2.ParameterType.Scale">
            <summary>
            Gets the parameter's scale factor before displayed
            </summary>
        </member>
        <member name="P:ViDi2.ParameterType.Range">
            <summary>
            Gets the parameters value range
            </summary>
        </member>
        <member name="M:ViDi2.ParameterType.#ctor(System.Double,System.String,System.String)">
            <summary>
            Creates an instance of a parameter tye description
            </summary>
            <param name="scale">the parameter's scale</param>
            <param name="unit">the parameter's unit</param>
            <param name="range">the parameter's value range</param>
        </member>
        <member name="T:ViDi2.Interval">
            <summary>
            Represents an interval
            </summary>
        </member>
        <member name="M:ViDi2.Interval.#ctor(System.Double,System.Double)">
            <summary>
            Creates an instance of the class
            </summary>
            <param name="lower">the lower bound</param>
            <param name="upper">the upper bound</param>
        </member>
        <member name="P:ViDi2.Interval.Lower">
            <summary>
            Gets or sets the lower bound
            </summary>
        </member>
        <member name="P:ViDi2.Interval.Upper">
            <summary>
            Gets or sets the upper bound
            </summary>
        </member>
        <member name="M:ViDi2.Interval.Set(System.Double,System.Double)">
            <summary>
            
            </summary>
            <param name="lower">the lower bound</param>
            <param name="upper">the upper bound</param>
        </member>
        <member name="M:ViDi2.Interval.Extend(System.Double)">
            <summary>
            Extends the interval to include the given value
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:ViDi2.Interval.Clamp(System.Double)">
            <summary>
            Returns the given value clamped to the intervals range
            </summary>
            <param name="value">the value</param>
            <returns>the clamped value</returns>
        </member>
        <member name="T:ViDi2.DebugSink">
            <summary>
            Enum describing where to write debug messages
            </summary>
        </member>
        <member name="F:ViDi2.DebugSink.Console">
            <summary>
            Log to console
            </summary>
        </member>
        <member name="F:ViDi2.DebugSink.File">
            <summary>
            Log to file
            </summary>
        </member>
        <member name="F:ViDi2.DebugSink.Stop">
            <summary>
            Stop logging
            </summary>
        </member>
        <member name="F:ViDi2.DebugSink.Debug">
            <summary>
            full logging
            </summary>
        </member>
        <member name="T:ViDi2.GpuMode">
            <summary>
            Enum to select the GPU processing mode
            </summary>
        </member>
        <member name="F:ViDi2.GpuMode.Default">
            <summary>
            (default) Each image is processed by a single GPU
            </summary>
        </member>
        <member name="F:ViDi2.GpuMode.SingleDevicePerTool">
            <summary>
            Each image is processed by a single GPU
            </summary>
        </member>
        <member name="F:ViDi2.GpuMode.MultipleDevicesPerTool">
            <summary>
            No longer supported
            </summary>
        </member>
        <member name="F:ViDi2.GpuMode.NoSupport">
            <summary>
            GPU support is disabled
            </summary>
        </member>
        <member name="F:ViDi2.GpuMode.Deferred">
            <summary>
            GPU support is deferred
            </summary>
        </member>
        <member name="T:ViDi2.StabilizeMode">
            <summary>
            Enum to select the GPU stabilize mode
            </summary>
        </member>
        <member name="F:ViDi2.StabilizeMode.Default">
            <summary>
            (default) Disable stabilize feature on initialized compte devices
            </summary>
        </member>
        <member name="F:ViDi2.StabilizeMode.Off">
            <summary>
            Disable stabilize feature on initialized compute devices
            </summary>
        </member>
        <member name="F:ViDi2.StabilizeMode.On">
            <summary>
            Enable stabilize feature on initialized compute devices
            </summary>
        </member>
        <member name="F:ViDi2.StabilizeMode.Arguments">
            <summary>
            Use optional arguments for stabilize feature on initialized compte devices (reserved)
            </summary>
        </member>
        <member name="F:ViDi2.OptimizedGpuMemoryOverride.UseDefault">
            <summary>
            The default amount of allocated GPU Memory (2GB) by enabling Optimized GPU Memory
            </summary>
        </member>
        <member name="F:ViDi2.OptimizedGpuMemoryOverride.UserSet">
            <summary>
            The amount of memory specified by the --optimized-gpu-memory parameter is used,
            unless the amount is set to 0.
            </summary>
        </member>
        <member name="T:ViDi2.AutoThresholdMode">
            <summary>
            Enum to select the auto threshold mode
            </summary>
        </member>
        <member name="T:ViDi2.WorkspaceName">
            <summary>
            holds the name of a workspace.
            This is used a attribute to any LibraryAccess method calls
            </summary>
        </member>
        <member name="M:ViDi2.WorkspaceName.op_Implicit(System.String)~ViDi2.WorkspaceName">
            <summary>
            implicit conversion from string to workspaceName
            </summary>
            <param name="name"></param>
        </member>
        <member name="T:ViDi2.WorkspacePermissions">
            <summary>
            Defines the permissions that one user
            can possess when accessing another user's workspace.
            </summary>
        </member>
    </members>
</doc>
